<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Godql Code</title>
  <subtitle>迈入新世界，为了成为独当一面的 Java 后端工程师！</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://GitHubSupervise.io/blog/"/>
  <updated>2017-04-15T20:12:27.892Z</updated>
  <id>http://GitHubSupervise.io/blog/</id>
  
  <author>
    <name>Dr.Lester</name>
    <email>googllwebmaster@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java高并发秒杀系统API</title>
    <link href="http://GitHubSupervise.io/blog/2017/04/16/javaHighConcurrencyOne/"/>
    <id>http://GitHubSupervise.io/blog/2017/04/16/javaHighConcurrencyOne/</id>
    <published>2017-04-15T20:05:27.000Z</published>
    <updated>2017-04-15T20:12:27.892Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>待更新</li>
</ul>]]></content>
    
    <summary type="html">
    
      本文总结自己开发秒杀系统Web层的过程，主要介绍前端交互设计、Restful:url满足Restful设计规范、Spring MVC、bootstrap+jquery这四个方面的开发。
    
    </summary>
    
      <category term="Java" scheme="http://GitHubSupervise.io/blog/categories/Java/"/>
    
    
      <category term="java" scheme="http://GitHubSupervise.io/blog/tags/java/"/>
    
      <category term="并发" scheme="http://GitHubSupervise.io/blog/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="秒杀系统" scheme="http://GitHubSupervise.io/blog/tags/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="交互" scheme="http://GitHubSupervise.io/blog/tags/%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的写一个Java MVC框架</title>
    <link href="http://GitHubSupervise.io/blog/2017/04/16/MVC/"/>
    <id>http://GitHubSupervise.io/blog/2017/04/16/MVC/</id>
    <published>2017-04-15T20:05:27.000Z</published>
    <updated>2017-04-15T20:16:07.071Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>待更新</li>
</ul>]]></content>
    
    <summary type="html">
    
      本文分享一些自己对框架的理解，对于写过一些框架的人可能会产生一些共鸣欢迎讨论，如果你正在写或正打算写一个框架可能会给你一些启发
    
    </summary>
    
      <category term="Java" scheme="http://GitHubSupervise.io/blog/categories/Java/"/>
    
    
      <category term="java" scheme="http://GitHubSupervise.io/blog/tags/java/"/>
    
      <category term="MVC" scheme="http://GitHubSupervise.io/blog/tags/MVC/"/>
    
      <category term="框架" scheme="http://GitHubSupervise.io/blog/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="优雅" scheme="http://GitHubSupervise.io/blog/tags/%E4%BC%98%E9%9B%85/"/>
    
  </entry>
  
  <entry>
    <title>SSH2(Struts2,Spring4,Hibernate5)整合的意义及其精髓</title>
    <link href="http://GitHubSupervise.io/blog/2017/04/01/sshIntegration/"/>
    <id>http://GitHubSupervise.io/blog/2017/04/01/sshIntegration/</id>
    <published>2017-03-31T21:40:27.000Z</published>
    <updated>2017-04-18T12:33:59.011Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="ssh三大框架整合的意义及其精髓"><a href="#ssh三大框架整合的意义及其精髓" class="headerlink" title="ssh三大框架整合的意义及其精髓"></a>ssh三大框架整合的意义及其精髓</h2><h3 id="hibernate工作原理"><a href="#hibernate工作原理" class="headerlink" title="hibernate工作原理"></a>hibernate工作原理</h3><ul>
<li>原理：<ul>
<li>读取并解析配置文件</li>
<li>读取并解析映射信息，创建<code>SessionFactory</code></li>
<li>打开<code>Sesssion</code></li>
<li>创建事务<code>Transation</code></li>
<li>持久化操作</li>
<li>提交事务</li>
<li>关闭<code>Session</code></li>
<li>关闭<code>SesstionFactory</code></li>
</ul>
</li>
</ul>
<h4 id="为什么要用："><a href="#为什么要用：" class="headerlink" title="为什么要用："></a>为什么要用：</h4><ul>
<li>对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。</li>
<li>Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作</li>
<li>hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。</li>
<li>hibernate的性能还可以，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。</li>
</ul>
<h4 id="Hibernate是如何延迟加载"><a href="#Hibernate是如何延迟加载" class="headerlink" title="Hibernate是如何延迟加载?"></a>Hibernate是如何延迟加载?</h4><ul>
<li>Hibernate2延迟加载实现：<ul>
<li>实体对象</li>
<li>集合（Collection）</li>
</ul>
</li>
<li>Hibernate3 提供了属性的延迟加载功能</li>
<li>当Hibernate在查询数据的时候，数据并没有存在与内存中，当程序真正对数据的操作时，对象才存在与内存中，就实现了延迟加载，他节省了服务器的内存开销，从而提高了服务器的性能。</li>
</ul>
<h4 id="Hibernate中怎样实现类之间的关系-如：一对多、多对多的关系"><a href="#Hibernate中怎样实现类之间的关系-如：一对多、多对多的关系" class="headerlink" title="Hibernate中怎样实现类之间的关系?(如：一对多、多对多的关系)"></a>Hibernate中怎样实现类之间的关系?(如：一对多、多对多的关系)</h4><ul>
<li>类与类之间的关系主要体现在表与表之间的关系进行操作，它们都是对对象进行操作，我们程序中把所有的表与类都映射在一起，它们通过配置文件中的many-to-one、one-to-many、many-to-many。</li>
</ul>
<h4 id="Hibernate的缓存机制"><a href="#Hibernate的缓存机制" class="headerlink" title="Hibernate的缓存机制"></a>Hibernate的缓存机制</h4><ul>
<li>内部缓存存在Hibernate中又叫一级缓存，属于应用事物级缓存 </li>
<li>二级缓存：<ul>
<li>应用及缓存</li>
<li>分布式缓存</li>
<li>条件：数据不会被第三方修改、数据大小在可接受范围、数据更新频率低、同一数据被系统频繁使用、非关键数据</li>
<li>第三方缓存的实现<h4 id="Hibernate的查询方式-Sql、Criteria-object-comptosition"><a href="#Hibernate的查询方式-Sql、Criteria-object-comptosition" class="headerlink" title="Hibernate的查询方式 Sql、Criteria,object comptosition"></a>Hibernate的查询方式 Sql、Criteria,object comptosition</h4></li>
</ul>
</li>
<li>Hql：<ul>
<li>属性查询</li>
<li>参数查询、命名参数查询</li>
<li>关联查询</li>
<li>分页查询</li>
<li>统计函数<h4 id="如何优化Hibernate？"><a href="#如何优化Hibernate？" class="headerlink" title="如何优化Hibernate？"></a>如何优化Hibernate？</h4></li>
</ul>
</li>
<li>使用双向一对多关联，不使用单向一对多</li>
<li>灵活使用单向一对多关联</li>
<li>不用一对一，用多对一取代</li>
<li>配置对象缓存，不使用集合缓存</li>
<li>一对多集合使用Bag,多对多集合使用Set</li>
<li>继承类使用显式多态</li>
<li>表字段要少，表关联不要怕多，有二级缓存撑腰  <h3 id="Struts工作原理"><a href="#Struts工作原理" class="headerlink" title="Struts工作原理"></a>Struts工作原理</h3><h4 id="Struts工作机制？"><a href="#Struts工作机制？" class="headerlink" title="Struts工作机制？"></a>Struts工作机制？</h4></li>
<li><p>工作机制：</p>
<ul>
<li>Struts的工作流程:<ul>
<li>在web应用启动时就会加载初始化<code>ActionServlet</code>,<code>ActionServlet</code>从<br><code>struts-config.xml</code>文件中读取配置信息,把它们存放到各种配置对象<br>当<code>ActionServlet</code>接收到一个客户请求时,将执行如下流程.<ul>
<li>检索和用户请求匹配的<code>ActionMapping</code>实例,如果不存在,就返回请求路径无效信息; </li>
<li>如果<code>ActionForm</code>实例不存在,就创建一个<code>ActionForm</code>对象,把客户提交的表单数据保存到<code>ActionForm</code>对象中; </li>
<li>根据配置信息决定是否需要表单验证.如果需要验证,就调用<code>ActionForm</code>的v<code>alidate()方法</code>; </li>
<li>如果<code>ActionForm</code>的<code>validate()方法</code>返回null或返回一个不包含<code>ActionMessage</code>的<code>ActuibErrors</code>对象, 就表示表单验证成功; </li>
<li><code>ActionServlet</code>根据<code>ActionMapping</code>所包含的映射信息决定将请求转发给哪个<code>Action</code>,如果相应的<code>Action</code>实例不存在,就先创建这个实例,然后调用<code>Action的execute()方法</code>; </li>
<li><code>Action的execute()方法</code>返回一个<code>ActionForward</code>对象,<code>ActionServlet</code>在把客户请求转发给<code>ActionForward</code>对象指向的JSP组件; </li>
<li><code>ActionForward</code>对象指向<code>JSP</code>组件生成动态网页,返回给客户;<h4 id="为什么要用：-1"><a href="#为什么要用：-1" class="headerlink" title="为什么要用："></a>为什么要用：</h4></li>
</ul>
</li>
<li>JSP、Servlet、JavaBean技术的出现给我们构建强大的企业应用系统提供了可能。但用这些技术构建的系统非常的繁乱，所以在此之上，我们需要一个规则、一个把这些技术组织起来的规则，这就是框架，Struts便应运而生。</li>
<li>基于Struts开发的应用由3类组件构成：控制器组件、模型组件、视图组件<h4 id="Struts的validate框架是如何验证的？"><a href="#Struts的validate框架是如何验证的？" class="headerlink" title="Struts的validate框架是如何验证的？"></a>Struts的validate框架是如何验证的？</h4></li>
<li>在struts配置文件中配置具体的错误提示，再在<code>FormBean</code>中的<code>validate()</code>方法具体调用<h4 id="Struts的架构"><a href="#Struts的架构" class="headerlink" title="Struts的架构"></a>Struts的架构</h4></li>
<li>MVC模式: web应用程序启动时就会加载并初始化<code>ActionServler</code>。用户提交表单时，一个配置好的<code>ActionForm</code>对象被创建，并被填入表单相应的数据，<code>ActionServler</code>根据<code>Struts-config.xml</code>文件配置好的设置决定是否需要表单验证，如果需要就调用<code>ActionForm</code>的<code>Validate()</code>验证后选择将请求发送到哪个<code>Action</code>，如果<code>Action</code>不存在，<code>ActionServlet</code>会先创建这个对象，然后调用 <code>Action的execute()方法</code>。<code>Execute()</code>从<code>ActionForm</code>对象中获取数据，完成业务逻辑，返回一个<code>ActionForward</code>对象，<code>ActionServlet</code>再把客户请求转发给<code>ActionForward</code>对象指定的jsp组件，<code>ActionForward</code>对象指定的jsp生成动态的网页，返回给客户<h3 id="spring工作原理"><a href="#spring工作原理" class="headerlink" title="spring工作原理"></a>spring工作原理</h3></li>
<li>spring mvc请所有的请求都提交给<code>DispatcherServlet</code>,它会委托应用系统的其他模块负责负责对请求进行真正的处理工作。</li>
<li>DispatcherServlet查询一个或多个<code>HandlerMapping</code>,找到处理请求的<code>Controller</code>.</li>
<li>DispatcherServlet请请求提交到目标<code>Controller</code></li>
<li>Controller进行业务逻辑处理后，会返回一个<code>ModelAndView</code></li>
<li>Dispathcher查询一个或多个<code>ViewResolver</code>视图解析器,找到ModelAndView对象指定的视图对象</li>
<li>视图对象负责渲染返回给客户端。<h4 id="为什么用："><a href="#为什么用：" class="headerlink" title="为什么用："></a>为什么用：</h4></li>
<li>AOP 让开发人员可以创建非行为性的关注点，称为横切关注点，并将它们插入到应用程序代码中。使用 AOP 后，公共服务 （比如日志、持久性、事务等）就可以分解成方面并应用到域对象上，同时不会增加域对象的对象模型的复杂性。</li>
<li>IOC 允许创建一个可以构造对象的应用环境，然后向这些对象传递它们的协作对象。正如单词 倒置 所表明的，IOC 就像反 过来的 JNDI。没有使用一堆抽象工厂、服务定位器、单元素（singleton）和直接构造（straight construction），每一个对象都是用其协作对象构造的。因此是由容器管理协作对象（collaborator）。<br>Spring即使一个AOP框架，也是一IOC容器。 Spring 最好的地方是它有助于您替换对象。有了 Spring，只要用 JavaBean 属性和配置文件加入依赖性（协作对象）。然后可以很容易地在需要时替换具有类似接口的协作对象。  <h4 id="Spring-框架是一个分层架构，由7个定义良好的模块组成。"><a href="#Spring-框架是一个分层架构，由7个定义良好的模块组成。" class="headerlink" title="Spring 框架是一个分层架构，由7个定义良好的模块组成。"></a>Spring 框架是一个分层架构，由7个定义良好的模块组成。</h4></li>
<li>Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式</li>
<li><img src="/img/Spring.png" alt="Spring示图"> </li>
<li>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</li>
</ul>
</li>
<li><code>核心容器</code>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是<code>BeanFactory</code>，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><code>Spring 上下文</code>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><code>Spring AOP</code>：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</li>
<li><code>Spring DAO</code>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><code>Spring ORM</code>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li>
<li><code>Spring Web模块</code>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li>
<li><code>Spring MVC框架</code>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
<li>Spring 框架的功能可以用在任何 J2EE 服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE 服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同 J2EE 环境 （Web 或 EJB）、独立应用程序、测试环境之间重用。<br>####IOC 和 AOP<ul>
<li>控制反转的基本概念是：不创建对象，但是描述创建它们的方式。在代码中不直接与对象和服务连接，但在配置文件中描述哪一个组件需要哪一项服务。容器（在 Spring 框架中是 IOC 容器） 负责将这些联系在一起。</li>
<li>它是依赖倒置原则的一种实现思想。<br>依赖倒置原则很好的解决了高层和低层之间的直接依赖，解决了<br>层与层之间的耦合度问题。但是，并没有解决对象的管理和装备的责任。意思也就是，所有对象的创建以及管理都必须在程序中完成。因此，当更换模块对象的时候，还是要修改原有的代码，这样又违反了开闭原则。<br>那么，控制反转的思想，就是将这些对象的创建管理以及装配等工作直接从程序中移除出来，交由给一个第三方的管理者去负责，这样就是将对象的控制权转移到了第三方的身上，这个过程就称之为控制反转。在控制反转中，都会有一个第三方的容器去管理和存储这些对象，这个容器就叫做IOC容器。<ul>
<li>IOC容器可以提供两种实现供客户端使用：<ul>
<li><code>依赖查找</code>，也就是客户端主动的从容器中去查找需要的对象。（根据bean Id）由应用程序负责到容器中查找所需要依赖的资源或对象，例如JAVA中的JNDI（Java naming Directory Interface）</li>
<li><code>依赖注入</code>，正好和以来查找相反，客户端所需的对象不需要自己去容器中查找，而是由容器自动的把这个对象注入到客户端中。（容器工厂赋值到程序中）<ul>
<li><code>作用</code>：由容器完成对对象之间依赖装配</li>
<li><code>装配</code>（属性、get方法、 构造方法）</li>
</ul>
</li>
</ul>
</li>
<li>（好莱坞原则，“你不要来找我，我会来找你”）<ul>
<li>例子：吃饭，之前要自己做，后来 别人做好饭且喂到你嘴里         </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在典型的 IOC 场景中，容器创建了所有对象，并设置必要的属性将它们连接在一起，决定什么时间调用方法。下表列出了 IOC 的一个实现模式。</p>
<ul>
<li><img src="/img/Ioc.png" alt="IOC示图"> </li>
</ul>
</li>
</ul>
<iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>]]></content>
    
    <summary type="html">
    
      本文分享自己对ssh三大框架的理解，有问题欢迎来讨论
    
    </summary>
    
      <category term="Java" scheme="http://GitHubSupervise.io/blog/categories/Java/"/>
    
    
      <category term="java" scheme="http://GitHubSupervise.io/blog/tags/java/"/>
    
      <category term="框架" scheme="http://GitHubSupervise.io/blog/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="IOC" scheme="http://GitHubSupervise.io/blog/tags/IOC/"/>
    
      <category term="AOP" scheme="http://GitHubSupervise.io/blog/tags/AOP/"/>
    
      <category term="Struts" scheme="http://GitHubSupervise.io/blog/tags/Struts/"/>
    
      <category term="Spring" scheme="http://GitHubSupervise.io/blog/tags/Spring/"/>
    
      <category term="Hibernate" scheme="http://GitHubSupervise.io/blog/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>深入理解IOC与AOP</title>
    <link href="http://GitHubSupervise.io/blog/2017/03/17/IOC-AOP/"/>
    <id>http://GitHubSupervise.io/blog/2017/03/17/IOC-AOP/</id>
    <published>2017-03-16T20:05:27.000Z</published>
    <updated>2017-04-18T07:23:01.727Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><ul>
<li>IOC(控制反转)，它是依赖倒置原则的一种实现思想。</li>
<li>依赖倒置原则很好的解决了高层和低层之间的直接依赖，解决了<br>层与层之间的耦合度问题。但是，并没有解决对象的管理和装备的责任。意思也就是，所有对象的创建以及管理都必须在程序中完成。因此，当更换模块对象的时候，还是要修改原有的代码，这样又违反了开闭原则。<br>那么，控制反转的思想，就是将这些对象的创建管理以及装配等工作直接从程序中移除出来，交由给一个第三方的管理者去负责，这样就是将对象的控制权转移到了第三方的身上，这个过程就称之为控制反转。在控制反转中，都会有一个第三方的容器去管理和存储这些对象，这个容器就叫做IOC容器。<h3 id="IOC容器可以提供两种实现供客户端使用："><a href="#IOC容器可以提供两种实现供客户端使用：" class="headerlink" title="IOC容器可以提供两种实现供客户端使用："></a>IOC容器可以提供两种实现供客户端使用：</h3><ul>
<li><code>依赖查找</code>：也就是客户端主动的从容器中去查找需要的对象。（根据bean Id）<pre><code>由应用程序负责到容器中查找所需要依赖的资源或对象，例如JAVA中的JNDI（Java naming Directory Interface）
</code></pre></li>
<li><code>依赖注入</code>：正好和以来查找相反，客户端所需的对象不需要自己去容器中查找，而是由容器自动的把这个对象注入到客户端中。（容器工厂赋值到程序中）</li>
<li><code>作用</code>：由容器完成对对象之间依赖装配</li>
<li><code>在Spring中装配</code>（属性，get 构造）</li>
<li>（好莱坞原则，“你不要来找我，我会来找你”）</li>
<li>例子：吃饭，之前要自己做，后来 别人做好饭且喂到你嘴里<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2></li>
</ul>
</li>
<li>AOP(面向切面编程)</li>
<li>它是面向对象的一种补充或者是一种增强，它在这基础之上增加了一些而外的功能增强。</li>
<li>它可以在原有的行为不改变的前提，在这之前或者之后完成一些而外的事情。</li>
<li><p>而AOP用的的思想和模式就是代理模式。<br>###代理模式分为两种：</p>
<ul>
<li><p>静态代理</p>
<ul>
<li>静态代理的的代理对象是开发人员自行编写好的，并且在编译期就已经确定。编写相应的接口和实现类，同时编写一个代理类实现这个接口。<br>缺点：<ul>
<li>1.需要要为不同的目标对象编写相应的代理实例，从而代理不同的业务逻辑。</li>
<li>2.当接口发生变动时，所有的代理类和实现类都必须修改。</li>
</ul>
</li>
</ul>
</li>
<li><p>动态代理</p>
<ul>
<li>使用动态代理，代理实例是不需要开发人员去编写的，而是有相应的处理程序在运行时动态产生一个字节码，这个字节码就是代理对象，并加载到JVM中执行。由于代理实例是在运行时才会动态产生，因此就叫做动态代理。它和静态代理的区别就在于，静态代理的代理实例是人为编写的，并且实在便宜期就已经确定的。<br>在Java语言层面实现动态代理的机制有很多，例如：<ul>
<li>JDK动态代理（官方）<ul>
<li>1.Proxy类， 用于动态产生代理对象</li>
<li>2.InvocationHandler接口，回调处理器，负责调用目标对象的行为，并实现功能增强。</li>
</ul>
</li>
</ul>
</li>
<li><p>JDK动态代理有一个特点，就是被代理的对象必须要有实现的接口，如果没有接口，是实现不了代理的。</p>
</li>
<li><p>CGLIB动态代理（第三方开源）</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content>
    
    <summary type="html">
    
      本文分享一些自己对IOC与AOP理解
    
    </summary>
    
      <category term="Java" scheme="http://GitHubSupervise.io/blog/categories/Java/"/>
    
    
      <category term="java" scheme="http://GitHubSupervise.io/blog/tags/java/"/>
    
      <category term="IOC" scheme="http://GitHubSupervise.io/blog/tags/IOC/"/>
    
      <category term="AOP" scheme="http://GitHubSupervise.io/blog/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>《番茄工作法图解》思维导图读书笔记分享</title>
    <link href="http://GitHubSupervise.io/blog/2017/02/16/Execution_of_work/"/>
    <id>http://GitHubSupervise.io/blog/2017/02/16/Execution_of_work/</id>
    <published>2017-02-16T14:48:29.000Z</published>
    <updated>2017-04-18T07:23:01.753Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>所谓番茄工作法，一句话概括就是：工作25分钟，休息5分钟。目的是保持注意力和高效的工作状态。我们有时候做一件事规定自己限时完成，也是这个道理。</li>
<li>下面是思维导图：<code>（建议保存到本地查看）</code><ul>
<li><img src="/img/potato.png" alt="思维导图"></li>
</ul>
</li>
<li>思维导图笔记作者：<a href="http://www.weibo.com/fisher205" target="_blank" rel="external">http://www.weibo.com/fisher205</a><iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>

</li>
</ul>]]></content>
    
    <summary type="html">
    
      《番茄工作法图解》的思维导图，全面、清晰，贴到这里分享一下！
    
    </summary>
    
      <category term="思维导图" scheme="http://GitHubSupervise.io/blog/categories/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    
      <category term="思维导图" scheme="http://GitHubSupervise.io/blog/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="笔记" scheme="http://GitHubSupervise.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工作法" scheme="http://GitHubSupervise.io/blog/tags/%E5%B7%A5%E4%BD%9C%E6%B3%95/"/>
    
      <category term="读书" scheme="http://GitHubSupervise.io/blog/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>非常完整的Chrome浏览器客户端调试大全</title>
    <link href="http://GitHubSupervise.io/blog/2017/02/04/Chrome/"/>
    <id>http://GitHubSupervise.io/blog/2017/02/04/Chrome/</id>
    <published>2017-02-04T13:42:27.000Z</published>
    <updated>2017-04-18T07:23:01.739Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>“工欲善其事，必先利其器” </p>
</blockquote>
<h2 id="先来认识一下这些按钮"><a href="#先来认识一下这些按钮" class="headerlink" title="先来认识一下这些按钮"></a>先来认识一下这些按钮</h2><ul>
<li><img src="/img/Chrome/1.png" alt="按钮"></li>
<li><p>先来看这张图最上头的一行是一个功能菜单，每一个菜单都有它相应的功能和使用方法，依次从左往右来看</p>
<ul>
<li><code>1.箭头按钮：</code>用于在页面选择一个元素来审查和查看它的相关信息，当我们在Elements这个按钮页面下点击某个Dom元素时，箭头按钮会变成选择状态</li>
<li><code>2.设备图标：</code>点击它可以切换到不同的终端进行开发模式，移动端和pc端的一个切换，可以选择不同的移动终端设备，同时可以选择不同的尺寸比例，chrome浏览器的模拟移动设备和真实的设备相差不大，是非常好的选择,可选择的适配 <ul>
<li><img src="/img/Chrome/2.png" alt="按钮"></li>
</ul>
</li>
<li><code>3.Elements 功能标签页：</code>用来查看，修改页面上的元素，包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息，下图我们可以看到当我鼠标选择id 为lg_tar的div元素时，右侧的css样式对应的会展示出此id 的样式信息，此时可以在右侧进行一个修改，修改即可在页面上生效， 灰色的element.style样式同样可以进行添加和书写，唯一的区别是，在这里添加的样式是添加到了该元素内部，实现方式即：该div元素的style属性，这个页面的功能很强大，在我们做了相关的页面后，修改样式是一块很重要的工作，细微的差距都需要调整，但是不可能说做到每修改一点即编译一遍代码，再刷新浏览器查看效果，这样很低效，一次性在浏览器中修改之后，再到代码中进行修改<ul>
<li><img src="/img/Chrome/3.png" alt="按钮"><ul>
<li>对应的样式</li>
</ul>
</li>
<li><img src="/img/Chrome/4.png" alt="按钮"><ul>
<li>盒模型信息</li>
<li>同时，当我们浏览网站看到某些特别炫酷的效果和难做的样式时候，打开这个功能，我们即可看到别人是如何实现的，学会它这知识就是你的了，仔细钻研也会有意想不到的收获</li>
</ul>
</li>
</ul>
</li>
<li><p><code>4.Console控制台：</code>用于打印和输出相关的命令信息，其实console控制台除了我们熟知的报错，打印console.log信息外，还有很多相关的功能，下面简单介绍几个：</p>
<ul>
<li>a: 一些对页面数据的指令操作，比如打断点正好执行到获取的数据上，由于数据都是层层嵌套的对象，这个时候查看里面的key/value不是很方便，即可用这个指令开查看，obj的json string 格式的key/value，我们对于数据里面有哪些字段和属性即可一目了然<ul>
<li><img src="/img/Chrome/5.png" alt="按钮"></li>
</ul>
</li>
<li>其他功能</li>
<li>b: 除了console.log还有其他相关的指令可用  <ul>
<li><img src="/img/Chrome/6.png" alt="按钮"></li>
</ul>
</li>
<li>console也有相关的API</li>
</ul>
</li>
<li><p><code>5.Sources js资源页面：</code>这个页面内我们可以找到当然浏览器页面中的js 源文件，方便我们查看和调试，在我还没有走出校园时候，我经常看一些大站的js代码，那时候其实基本都看不懂，但是最起码可以看看人家的代码风格，人家的命名方式，所有的代码都是压缩之后的代码，我们可以点击下面的{}大括号按钮将代码转成可读格式</p>
<ul>
<li>Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets<ul>
<li><img src="/img/Chrome/7.png" alt="按钮"></li>
</ul>
</li>
<li>对应的源代码 <ul>
<li><img src="/img/Chrome/8.png" alt="按钮"></li>
</ul>
</li>
<li>格式化后的代码<ul>
<li>关于打断点调试的内容，下面介绍，先来说一些，其他平时基本没人用但是很有用的小点，比如当我们想不起某个方法的具体使用时候，会打开控制台随意写一些测试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码，所以推荐使用Sources下面的左侧的Sinppets代码片段按钮，这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息（新建了一个名叫：app.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法）</li>
<li><img src="/img/Chrome/9.png" alt="按钮"></li>
</ul>
</li>
<li>自己书写的片段<ul>
<li>Content scripts 是 Chrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，但是几乎我们的项目还没有相关的扩展文件，所以啥也看不到，平时也不需要关心这块</li>
<li><img src="/img/Chrome/10.png" alt="按钮"></li>
<li>无结果</li>
</ul>
</li>
</ul>
</li>
<li><code>6.Network 网络请求标签页：</code>可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看<ul>
<li><img src="/img/Chrome/11.png" alt="按钮"></li>
<li>所有的资源</li>
<li>以上我选择了All，就会把该页面所有资源文件请求下来，如果只选择XHR 异步请求资源，则我们可以分析相关的请求信息</li>
<li><img src="/img/Chrome/12.png" alt="按钮"></li>
<li>请求的相关信息</li>
<li>打开一个Ajax异步请求，可以看到它的请求头信息，是一个POST请求，参数有哪些，还可以预览它的返回的结果数据，这些数据的使用和查看有利于我们很好的和后端工程师们联调数据，也方便我们前端更直观的分析数据</li>
<li><img src="/img/Chrome/13.png" alt="按钮"></li>
<li>预览请求的数据</li>
</ul>
</li>
<li><code>7.Timeline</code>标签页可以显示JS执行时间、页面元素渲染时间，不做过多介绍</li>
<li><code>8.Profiles</code>标签页可以查看CPU执行时间与内存占用，不做过多介绍</li>
<li><code>9.Resources</code>标签页会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍</li>
<li><code>10.Security</code>标签页可以告诉你这个网站的安全性，查看有效的证书等</li>
<li><code>11.Audits</code>标签页可以帮你分析页面性能，有助于优化前端页面，分析后得到的报告<ul>
<li><img src="/img/Chrome/14.png" alt="按钮"></li>
<li>分析结果<h2 id="Sources资源页面的断点调试"><a href="#Sources资源页面的断点调试" class="headerlink" title="Sources资源页面的断点调试"></a>Sources资源页面的断点调试</h2></li>
</ul>
</li>
<li><code>1.如何调试：</code><ul>
<li>调试js代码，肯定是我们常用的功能，那么如何打断点，找到要调试的文件，然后在内容源代码左侧的代码标记行处点击即可打上一个断点</li>
<li><img src="/img/Chrome/15.png" alt="调试"></li>
</ul>
</li>
<li><code>2.断点与 js代码修改</code><ul>
<li>看下面这张图，我在一个名为toggleTab的方法下打了两个断点，当开始执行我们的点击切换tab行为后，代码会在执行的断点出停下来，并把相关的数据展示一部分，此时可以在已经执行过得代码处，把鼠标放上去，即可查看相关的具体数据信息，同时我们可以使用右侧的功能键进行调试，右侧最上面一排分别是：暂停/继续、单步执行(F10快捷键)、单步跳入此执行块(F11快捷键)、单步跳出此执行块、禁用/启用所有断点。下面是各种具体的功能区</li>
<li><img src="/img/Chrome/16.png" alt="断点"><ul>
<li>在代码中打断点</li>
<li>在当前的代码执行区域，在调试中如果发现需要修改的地方，也是可以立即修改的，修改后保存即可生效，这样就免去了再到代码中去书写，再刷新回看了</li>
<li><img src="/img/Chrome/17.png" alt="断点"></li>
<li>临时修改</li>
</ul>
</li>
</ul>
</li>
<li><code>3.快速进入调试的方法</code> <ul>
<li>当我们的代码执行到某个程序块方法处，这个方法上可能你并没有设置相关的断点，此时你可以F11进入此程序块，但是往往我们的项目都是经过很多源代码封装好的方法，有时候进入后，会走很多底层的封装方法，需要很多步骤才能真正进入这个函数块，此时将鼠标放在此函数上，会出现相关提示，会告诉你在该文件的哪一行代码处，点击即可直接看到这个函数，然后临时打上断点，按F10或者点击右上角的第二个按钮即可直接进入此函数的断点处</li>
<li><img src="/img/Chrome/18.png" alt="快速调试"></li>
</ul>
</li>
<li><code>4.调试的功能区域</code> <ul>
<li>每一个功能区，都有它相关的左右，先来看一张图，它都有哪些功能</li>
<li><img src="/img/Chrome/19.png" alt="功能区域"><ul>
<li>Call Stack调用栈：当断点执行到某一程序块处停下来后，右侧调试区的 Call Stack 会显示当前断点所处的方法调用栈，从上到下由最新调用处依次往下排列，Call Stack 列表的下方是Scope Variables列表可以查看此时局部变量和全局变量的值。图中可以看出，我们最先走了toggleTab这个方法，然后走到了一个更新对象的方法上，当前调用在哪里，箭头会帮你指向哪里，同时我们可以点击，调用栈列表上的任意一处，即可回头再去看看代码</li>
<li><img src="/img/Chrome/20.png" alt="调用栈"></li>
<li>但是若你想从新从某个调用方法出执行，可以右键Restart Frame， 断点就会跳到此处开头重新执行，Scope 中的变量值也会依据代码从新更改，这样就可以回退来从新调试，错过的调试也可以回过头来反复查看</li>
<li><img src="/img/Chrome/21.png" alt="调用方法"></li>
<li>Breakpoints关于断点：所有当前js的断点都会展示在这个区域，你可以点击按钮用来“去掉/加上”此处断点，也可以点击下方的代码表达式，调到相应的程序代码处，来查看</li>
<li><img src="/img/Chrome/22.png" alt="关于断点"></li>
<li>XHR Breakpoints</li>
<li>在XHR Breakpoints处，点击右侧的+号，可以添加请求的URL，一旦 XHR 调用触发时就会在 request.send() 的地方中断</li>
<li><img src="/img/Chrome/23.png" alt="XHR"></li>
<li>DOM Breakpoints:</li>
<li>可以给你的DOM元素设置断点，有时候真的需要监听和查看某个元素的变化情况，赋值情况，但是我们并是不太关心哪一段代码对它做的修改，只想看看它的变化情况，那么可以给它来个监听事件，这个时候DOM Breakpoints中会如图</li>
<li><img src="/img/Chrome/24.png" alt="DOM"></li>
<li>当要给DOM添加断点的时候，会出现选择项分别是如下三种修改1.子节点修改2.自身属性修改3.自身节点被删除。选中之后，Sources Panel 中右侧的 DOM Breakpoints 列表中就会出现该 DOM 断点。一旦执行到要对该 DOM 做相应修改时，代码就会在那里停下来</li>
<li>Event listener Breakpoints </li>
<li>最后Event Listener 列表，这里列出了各种可能的事件类型。勾选对应的事件类型，当触发了该类型的事件的 JavaScript 代码时就会自动中断<h2 id="Postman你值得拥有的网络请求神器"><a href="#Postman你值得拥有的网络请求神器" class="headerlink" title="Postman你值得拥有的网络请求神器"></a>Postman你值得拥有的网络请求神器</h2></li>
</ul>
</li>
</ul>
</li>
<li>在我们的开发过程中，后端的接口都是由发起AJAX请求而获取到的相关数据，但是很多情况是我们的业务还没有做到那块时，后端的同学接口都已经准备好了，但是为了便于后期的工作，将接口请求的数据模拟访问，然后对接口联调很重要，也很方便，因为我们不可能把每个请求代码都写到文件里编译好了再去浏览器内查看，这时候可以安装一个post man网络请求插件，在谷歌应用商店下载，需要翻墙<ul>
<li><img src="/img/Chrome/25.png" alt="Postman"></li>
</ul>
</li>
<li>该扩展程序使用非常简单，功能同时也非常强大，输入你的请求，选择好请求的method，需要请求参数的挨个填好，send之后，就可以看到返回的数据，这个小工具很利于我们的开发<ul>
<li><img src="/img/Chrome/26.png" alt="Postman"></li>
</ul>
</li>
</ul>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><ul>
<li>写到这里这篇总结就结束了，也许有很多写的不到位的地方，也有一些专业用词不严谨的地方，希望看到的读者可以和我一起交流，我也非常乐意我的总结可以给 刚刚学会编程需要调试的同学受用，再此之前我一直在寻找一篇从头到尾的调试教学文章，我一直没有找到，要么是一点点的片段讲解，要么是专讲js断点调试，所以索性后来就直接看了 Chrome Developer Tools 的英文官方文档，并结合自己的一些小使用心得总结出此文，希望受到指点和修正 也希望可以帮助一些同学~<iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>






</li>
</ul>
</li>
</ul>]]></content>
    
    <summary type="html">
    
      本文将讲解基于 Chrome浏览器客户端 如何更好的调试！
    
    </summary>
    
      <category term="Chrome" scheme="http://GitHubSupervise.io/blog/categories/Chrome/"/>
    
    
      <category term="Chrome" scheme="http://GitHubSupervise.io/blog/tags/Chrome/"/>
    
      <category term="客户端" scheme="http://GitHubSupervise.io/blog/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
      <category term="调试" scheme="http://GitHubSupervise.io/blog/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="前端" scheme="http://GitHubSupervise.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java资源大全中文版</title>
    <link href="http://GitHubSupervise.io/blog/2017/01/02/Awesome-java-cn/"/>
    <id>http://GitHubSupervise.io/blog/2017/01/02/Awesome-java-cn/</id>
    <published>2017-01-01T21:40:27.000Z</published>
    <updated>2017-04-18T12:33:59.019Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。<a href="https://github.com/akullpp/awesome-java" target="_blank" rel="external">awesome-java</a> 就是 akullpp 发起维护的 Java 资源列表，内容包括：构建工具、数据库、框架、模板、安全、代码分析、日志、第三方库、书籍、Java 站点等等。伯乐在线已经把 awesome-java 资源列表翻成中文后发布于 <a href="http://www.importnew.com/14429.html" target="_blank" rel="external">ImportNew</a>。</p>
<p>Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是我们发起这个开源项目的初衷。</p>
<hr>
<h3 id="我们要做什么？"><a href="#我们要做什么？" class="headerlink" title="我们要做什么？"></a>我们要做什么？</h3><ul>
<li>基于 awesome-java 资源列表，我们将对各个资源项进行编译整理。</li>
<li>整理后的内容，将收录在<a href="http://hao.jobbole.com/" target="_blank" rel="external">伯乐在线资源频道</a>。可参考已整理的内容：<ul>
<li>《<a href="http://hao.jobbole.com/owner/" target="_blank" rel="external">OWNER：Java配置文件解决方案</a>》</li>
<li>《<a href="http://hao.jobbole.com/spring-boot/" target="_blank" rel="external">Spring Boot：简化Spring应用初始搭建以及开发过程</a>》</li>
<li>《<a href="http://hao.jobbole.com/sonarqube/" target="_blank" rel="external">SonarQube：开源的代码质量管理工具</a>》</li>
</ul>
</li>
</ul>
<hr>
<h3 id="如何参与本项目？"><a href="#如何参与本项目？" class="headerlink" title="如何参与本项目？"></a>如何参与本项目？</h3><p>从下面的目录来看，本项目的工作量小不了，所以非常期待能有更多程序员一起来参与。</p>
<p>不过加入前，有几个小要求：</p>
<ul>
<li>英文还不错，能读懂英文并用自己的话复述；</li>
<li>在用 Java；</li>
</ul>
<p>如有兴趣，请加 QQ：50872495。加 Q 时请注明「Java大全」</p>
<hr>
<h3 id="本项目的参与者"><a href="#本项目的参与者" class="headerlink" title="本项目的参与者"></a>本项目的参与者</h3><ul>
<li><p>维护者：<a href="https://github.com/tangyouhua" target="_blank" rel="external">tangyouhua</a></p>
</li>
<li><p>贡献者：<a href="https://github.com/tangyouhua" target="_blank" rel="external">tangyouhua</a>、<a href="https://github.com/kingzone" target="_blank" rel="external">kingzone</a>、<a href="https://github.com/llhua2329" target="_blank" rel="external">llhua2329</a>、<a href="https://github.com/BadCoderChou" target="_blank" rel="external">BadCoderChou</a>、<a href="http://www.jobbole.com/members/anankun/" target="_blank" rel="external">anankun</a>、<a href="http://www.jobbole.com/members/jianghehe/" target="_blank" rel="external">贺贺</a>、<a href="http://www.jobbole.com/members/petra/" target="_blank" rel="external">大彭</a>、<a href="https://github.com/wing00yf/" target="_blank" rel="external">superXiaoFan</a>、<a href="http://www.jobbole.com/members/3951356/" target="_blank" rel="external">javayrf</a>、<a href="http://www.jobbole.com/members/John%20Smith/" target="_blank" rel="external">John Smith</a>、<a href="http://www.jobbole.com/members/jaler/" target="_blank" rel="external">Jaler</a>、<a href="http://www.jobbole.com/members/fdconan/" target="_blank" rel="external">JM</a>、<a href="http://www.jobbole.com/members/zy124348985/" target="_blank" rel="external">dreamkidd</a>、<a href="http://www.jobbole.com/members/cheenlie" target="_blank" rel="external">cheenlie</a>、<a href="http://www.jobbole.com/members/zhangQian1991" target="_blank" rel="external">zhangQian1991</a>、<a href="http://www.jobbole.com/members/wt726553124/" target="_blank" rel="external">王涛</a>、<a href="http://www.jobbole.com/members/xun_cui" target="_blank" rel="external">马</a>、<a href="http://www.jobbole.com/members/xuhf_1988/" target="_blank" rel="external">vvkee</a>、<a href="http://www.jobbole.com/members/yangxy81118" target="_blank" rel="external">凝枫</a>、<a href="https://github.com/luhaixun" target="_blank" rel="external">haixunlu</a>、<a href="http://www.jobbole.com/members/milly/" target="_blank" rel="external">milly</a>、<a href="http://www.jobbole.com/members/xuhf_1988/" target="_blank" rel="external">Hodur</a>、<a href="http://www.jobbole.com/members/FakeHank" target="_blank" rel="external">FakeHank</a>、<a href="http://www.jobbole.com/members/%E8%BF%9E%E4%B9%90/" target="_blank" rel="external">连乐</a>、<a href="http://www.jobbole.com/members/UncleTim/" target="_blank" rel="external">UncleTim</a>、<a href="http://www.jobbole.com/members/sunbiaobiao" target="_blank" rel="external">sunbiaobiao</a>、<a href="http://www.jobbole.com/members/wx2702327993/" target="_blank" rel="external">zhiguo</a>、You</p>
</li>
</ul>
<p>注：名单不分排名，不定期补充更新</p>
<hr>
<h3 id="最新活动"><a href="#最新活动" class="headerlink" title="最新活动"></a>最新活动</h3><ul>
<li><strong>贡献打赏：</strong>整理20个资源以上的朋友会开通打赏功能，参见<a href="http://hao.jobbole.com/dropwizard/" target="_blank" rel="external">Dropwizard</a>结尾打赏信息。</li>
<li><strong>整理技术资源，赠送经典书籍</strong>： 每整理20个资源，赠送技术书籍一本。<a href="http://group.jobbole.com/13769/" target="_blank" rel="external">活动详情</a></li>
</ul>
<hr>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="#awesome-java-cn">Java资源大全中文版</a><ul>
<li><a href="#ancients">古董级工具</a></li>
<li><a href="#build">构建工具</a></li>
<li><a href="#bytecode-manipulation">字节码操作</a></li>
<li><a href="#cluster-management">集群管理</a></li>
<li><a href="#code-analysis">代码分析</a></li>
<li><a href="#compiler-compiler">编译器生成工具</a></li>
<li><a href="#configuration">外部配置工具</a></li>
<li><a href="#constraint-satisfaction-problem-solver">约束满足问题求解程序</a></li>
<li><a href="#continuous-integration">持续集成</a></li>
<li><a href="#csv">CSV解析</a></li>
<li><a href="#data-structures">数据结构</a></li>
<li><a href="#database">数据库</a></li>
<li><a href="#date-and-time">时间日期工具库</a></li>
<li><a href="#dependency-injection">依赖注入</a></li>
<li><a href="#development">开发流程增强工具</a></li>
<li><a href="#distributed-applications">分布式应用</a></li>
<li><a href="#distributed-databases">分布式数据库</a></li>
<li><a href="#distribution">发布</a></li>
<li><a href="#document-processing">文档处理工具</a></li>
<li><a href="#functional-programming">函数式编程</a></li>
<li><a href="#game-development">游戏开发</a></li>
<li><a href="#gui">GUI</a></li>
<li><a href="#high-performance">高性能计算</a></li>
<li><a href="#ide">IDE</a></li>
<li><a href="#imagery">图像处理</a></li>
<li><a href="#json">JSON</a></li>
<li><a href="#jvm-and-jdk">JVM与JDK</a></li>
<li><a href="#languages">基于JVM的语言</a></li>
<li><a href="#logging">日志</a></li>
<li><a href="#machine-learning">机器学习</a></li>
<li><a href="#messaging">消息传递</a></li>
<li><a href="#miscellaneous">杂项</a></li>
<li><a href="#monitoring">应用监控工具</a></li>
<li><a href="#native">原生开发库</a></li>
<li><a href="#natural-language-processing">自然语言处理</a></li>
<li><a href="#networking">网络</a></li>
<li><a href="#orm">ORM</a></li>
<li><a href="#pdf">PDF</a></li>
<li><a href="#performance-analysis">性能分析</a></li>
<li><a href="#reactive-libraries">响应式开发库</a></li>
<li><a href="#rest-frameworks">REST框架</a></li>
<li><a href="#science">科学计算与分析</a></li>
<li><a href="#search">搜索引擎</a></li>
<li><a href="#security">安全</a></li>
<li><a href="#serialization">序列化</a></li>
<li><a href="#server">应用服务器</a></li>
<li><a href="#template-engine">模板引擎</a></li>
<li><a href="#testing">测试</a></li>
<li><a href="#utility">通用工具库</a></li>
<li><a href="#web-crawling">网络爬虫</a></li>
<li><a href="#web-frameworks">Web框架</a></li>
<li><a href="#Business-Process-Management">业务流程管理套件</a></li>
</ul>
</li>
<li><a href="#resources">资源</a><ul>
<li><a href="#communities">社区</a></li>
<li><a href="#influential-books">有影响力的书</a></li>
<li><a href="#podcasts">播客</a></li>
<li><a href="#weibo-weixin">微博、微信公众号</a></li>
<li><a href="#twitter">Twitter</a></li>
<li><a href="#websites">知名网站</a></li>
<li><a href="blogs">博客</a></li>
</ul>
</li>
</ul>
<h2 id="ancients">古董级工具</h2>

<p><em>这些工具伴随着Java一起出现，在各自辉煌之后还在一直使用。</em></p>
<ul>
<li>Apache Ant：基于XML的构建管理工具。<a href="http://ant.apache.org/" target="_blank" rel="external">官网</a></li>
<li>cglib：字节码生成库。<a href="https://github.com/cglib/cglib" target="_blank" rel="external">官网</a></li>
<li>GlassFish：应用服务器，由Oracle赞助支持的Java EE参考实现。<a href="https://glassfish.java.net/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/hudson/" target="_blank" rel="external">Hudson</a>：持续集成服务器，目前仍在活跃开发。<a href="http://hudson-ci.org/" target="_blank" rel="external">官网</a></li>
<li>JavaServer Faces：Mojarra是JSF标准的一个开源实现，由Oracle开发。<a href="https://javaserverfaces.java.net/" target="_blank" rel="external">官网</a></li>
<li>JavaServer Pages：支持自定义标签库的网站通用模板库。<a href="https://jsp.java.net/" target="_blank" rel="external">官网</a></li>
<li>Liquibase：与具体数据库独立的追踪、管理和应用数据库Scheme变化的工具。<a href="http://www.liquibase.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="build">构建工具</h3>

<p><em>构建及应用依赖关系处理工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/maven/" target="_blank" rel="external">Apache Maven</a>：Maven是一款声明式构建及依赖管理工具，采用约定优于配置方式进行管理。相对Apache Ant更推荐使用Maven，前者采用了过程式管理，维护相对困难。<a href="http://maven.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/bazel/" target="_blank" rel="external">Bazel</a>：来自Google的构建工具，可以快速、可靠地构建代码。<a href="http://bazel.io" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/gradle/" target="_blank" rel="external">Gradle</a>：使用Groovy（非XML）进行增量构建，可以很好地与Maven依赖管理配合工作。<a href="http://gradle.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="bytecode-manipulation">字节码操作</h3><br><em>编程方式操作字节码的开发库。</em><p></p>
<ul>
<li>ASM：通用底层字节码操作和分析开发库。<a href="http://asm.ow2.org/" target="_blank" rel="external">官网</a></li>
<li>Byte Buddy：使用流式API进一步简化字节码生成。<a href="http://bytebuddy.net/" target="_blank" rel="external">官网</a></li>
<li>Byteman：在运行时通过DSL（规则）操作字节码进行测试和故障排除。<a href="http://byteman.jboss.org/" target="_blank" rel="external">官网</a></li>
<li>Javassist：一个简化字节码编辑尝试。<a href="http://jboss-javassist.github.io/javassist" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="cluster-management">集群管理</h3><br><em>在集群内动态管理应用程序的框架。</em><p></p>
<ul>
<li>Apache Aurora：Apache Aurora是一个Mesos框架，用于长时间运行服务和定时任务（cron job）。<a href="http://aurora.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Singularity：Singularity是一个Mesos框架，方便部署和操作。它支持Web Service、后台运行、调度作业和一次性任务。<a href="http://getsingularity.com/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="code-analysis">代码分析</h3><br><em>测量代码指标和质量工具。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/checkstyle/" target="_blank" rel="external">Checkstyle</a>：代码编写规范和标准静态分析工具。<a href="https://github.com/checkstyle/checkstyle" target="_blank" rel="external">官网</a></li>
<li>Error Prone：将常见编程错误作为运行时错误报告。<a href="https://github.com/google/error-prone" target="_blank" rel="external">官网</a></li>
<li>FindBugs：通过字节码静态分析查找隐藏bug。<a href="http://findbugs.sourceforge.net/" target="_blank" rel="external">官网</a></li>
<li>jQAssistant：使用基于Neo4J查询语言进行代码静态分析。<a href="http://jqassistant.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pmd/" target="_blank" rel="external">PMD</a>：对源代码分析查找不良的编程习惯。<a href="https://github.com/pmd/pmd" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/sonarqube/" target="_blank" rel="external">SonarQube</a>：通过插件集成其它分析组件，对过去一段时间内的数据进行统计。<a href="http://www.sonarqube.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="compiler-compiler">编译器生成工具</h3><br><em>用来创建解析器、解释器或编译器的框架。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/antlr/" target="_blank" rel="external">ANTLR</a>：复杂的全功能自顶向下解析框架。<a href="http://www.antlr.org/" target="_blank" rel="external">官网</a></li>
<li><a href="JavaCC：Java语法解析器生成工具">JavaCC</a>：JavaCC是更加专门的轻量级工具，易于上手且支持语法超前预测。<a href="https://javacc.java.net/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="configuration">外部配置工具</h3><br><em>支持外部配置的开发库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/config/" target="_blank" rel="external">config</a>：针对JVM语言的配置库。<a href="https://github.com/typesafehub/config" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/owner/" target="_blank" rel="external">owner</a>：减少冗余配置属性。<a href="https://github.com/lviggiano/owner" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="constraint-satisfaction-problem-solver">约束满足问题求解程序</h3><br><em>帮助解决约束满足问题的开发库。</em><p></p>
<ul>
<li>Choco：可直接使用的约束满足问题求解程序，使用了约束规划技术。<a href="http://choco-solver.org/" target="_blank" rel="external">官网</a></li>
<li>JaCoP：为FlatZinc语言提供了一个接口，可以执行MiniZinc模型。<a href="https://github.com/radsz/jacop/" target="_blank" rel="external">官网</a></li>
<li>OptaPlanner：企业规划与资源调度优化求解程序。<a href="http://www.optaplanner.org/" target="_blank" rel="external">官网</a></li>
<li>Sat4J：逻辑代数与优化问题最先进的求解程序。<a href="http://www.sat4j.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="continuous-integration">持续集成</h3><p></p>
<ul>
<li>Bamboo：Atlassian解决方案，可以很好地集成Atlassian的其他产品。可以选择开源许可，也可以购买商业版。<a href="https://www.atlassian.com/sotware/bamboo" target="_blank" rel="external">官网</a></li>
<li>CircleCI：提供托管服务，可以免费试用。<a href="https://circleci.com/" target="_blank" rel="external">官网</a></li>
<li>Codeship：提供托管服务，提供有限的免费模式。<a href="https://codeship.com/features" target="_blank" rel="external">官网</a></li>
<li>fabric8：容器集成平台。<a href="http://fabric8.io/" target="_blank" rel="external">官网</a></li>
<li>Go：ThoughtWork开源解决方案。<a href="https://www.thoughtworks.com/go/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jenkins/" target="_blank" rel="external">Jenkins</a>：支持基于服务器的部署服务。<a href="http://jenkins-ci.org/" target="_blank" rel="external">官网</a></li>
<li>TeamCity：JetBrain的持续集成解决方案，有免费版。<a href="http://www.jetbrains.com/teamcity/" target="_blank" rel="external">官网</a></li>
<li>Travis：通常用作开源项目的托管服务。<a href="https://travis-ci.org" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="csv">CSV解析</h3><br><em>简化CSV数据读写的框架与开发库</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/univocity-parsers/" target="_blank" rel="external">uniVocity-parsers</a>：速度最快功能最全的CSV开发库之一，同时支持TSV与固定宽度记录的读写。<a href="https://github.com/uniVocity/univocity-parsers" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="database">数据库</h3><br><em>简化数据库交互的相关工具。</em><p></p>
<ul>
<li>Apache Phoenix：HBase针对低延时应用程序的高性能关系数据库层。<a href="http://phoenix.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Crate：实现了数据同步、分片、缩放、复制的分布式数据存储。除此之外还可以使用基于SQL的语法跨集群查询。<a href="https://crate.io/" target="_blank" rel="external">官网</a></li>
<li>Flyway：简单的数据库迁移工具。<a href="http://flywaydb.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/h2/" target="_blank" rel="external">H2</a>：小型SQL数据库，以可以作为内存数据库使用著称。<a href="http://h2database.com/" target="_blank" rel="external">官网</a></li>
<li>HikariCP：高性能JDBC连接工具。<a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="external">官网</a></li>
<li>JDBI：便捷的JDBC抽象。<a href="http://jdbi.org/" target="_blank" rel="external">官网</a></li>
<li>jOOQ：为SQL schema生成typesafe代码。<a href="http://www.jooq.org/" target="_blank" rel="external">官网</a></li>
<li>MapDB：以磁盘或堆内存中并发集合为基础的嵌入式数据库引擎。<a href="http://www.mapdb.org/" target="_blank" rel="external">官网</a></li>
<li>Presto：针对大数据的分布式SQL查询引擎。<a href="https://github.com/facebook/presto" target="_blank" rel="external">官网</a></li>
<li>Querydsl：Typesafe统一查询。<a href="http://www.querydsl.com/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="data-structures">数据结构</h3><p></p>
<ul>
<li>Apache Parquet：Google Dremel论文中发布的基于组装算法的列式（Columnar）存储格式。<a href="http://parquet.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Protobuf：Google数据交换格式。<a href="https://github.com/google/protobuf" target="_blank" rel="external">官网</a></li>
<li>SBE：简单二进制编码，是最快速的消息格式之一。<a href="https://github.com/real-logic/simple-binary-encoding" target="_blank" rel="external">官网</a></li>
<li>Wire：整洁轻量级协议缓存。<a href="https://github.com/square/wire" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="date-and-time">时间日期工具库</h3><br><em>处理时间和日期的开发库。</em><p></p>
<ul>
<li><a href="hao.jobbole.com/joda-time/">Joda-Time</a>：在Java 8发布前，Joda-Time是实际使用的时间日期库标准。<a href="http://www.joda.org/joda-time/" target="_blank" rel="external">官网</a></li>
<li>Time4J：高级时间和日期库。<a href="https://github.com/MenoData/Time4J" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="dependency-injection">依赖注入</h3><br><em>帮实现[依赖翻转范式的开发库。</em><a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="external">官网</a><p></p>
<ul>
<li>Apache DeltaSpike：CDI扩展框架。<a href="https://deltaspike.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Dagger2：编译时注入框架，不需要使用反射。<a href="http://google.github.io/dagger/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/guice/" target="_blank" rel="external">Guice</a>：可以匹敌Dagger的轻量级注入框架。<a href="https://github.com/google/guice" target="_blank" rel="external">官网</a></li>
<li>HK2：轻量级动态依赖注入框架。<a href="https://hk2.java.net" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="development">开发流程增强工具</h3><br><em>从最基本的层面增强开发流程。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/adt4j/" target="_blank" rel="external">ADT4J</a>：针对代数数据类型的JSR-269代码生成器。<a href="https://github.com/sviperll/adt4j" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/aspectj/" target="_blank" rel="external">AspectJ</a>：面向切面编程（AOP）的无缝扩展。<a href="https://eclipse.org/aspectj/" target="_blank" rel="external">官网</a></li>
<li>Auto：源代码生成器集合。<a href="https://github.com/google/auto" target="_blank" rel="external">官网</a></li>
<li>DCEVM：通过修改JVM在运行时支持对已加载的类进行无限次重定义。<a href="http://dcevm.github.io/" target="_blank" rel="external">官网</a></li>
<li>HotswapAgent：支持无限次重定义运行时类与资源。<a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="external">官网</a></li>
<li>Immutables：类似Scala的条件类。<a href="http://immutables.github.io/" target="_blank" rel="external">官网</a></li>
<li>JHipster：基于Spring Boot与AngularJS应用程序的Yeoman源代码生成器。<a href="https://github.com/jhipster/generator-jhipster" target="_blank" rel="external">官网</a></li>
<li>JRebel：无需重新部署，可以即时重新加载代码与配置的商业软件。<a href="http://zeroturnaround.com/software/jrebel/" target="_blank" rel="external">官网</a></li>
<li>Lombok：减少冗余的代码生成器。<a href="https://projectlombok.org/" target="_blank" rel="external">官网</a></li>
<li>Spring Loaded：类重载代理。<a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="external">官网</a></li>
<li>vert.x：多语言事件驱动应用框架。<a href="http://vertx.io/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="distributed-applications">分布式应用</h3><br><em>用来编写分布式容错应用的开发库和框架。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/akka/" target="_blank" rel="external">Akka</a>：用来编写分布式容错并发事件驱动应用程序的工具和运行时。<a href="http://akka.io" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/storm/" target="_blank" rel="external">Apache Storm</a>：实时计算系统。<a href="http://storm.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Apache ZooKeeper：针对大型分布式系统的协调服务，支持分布式配置、同步和名称注册。<a href="http://zookeeper.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Hazelcast：高可扩展内存数据网格。<a href="http://hazelcast.org/" target="_blank" rel="external">官网</a></li>
<li>Hystrix：提供延迟和容错。<a href="https://github.com/Netflix/Hystrix" target="_blank" rel="external">官网</a></li>
<li>JGroups：提供可靠的消息传递和集群创建的工具。<a href="http://www.jgroups.org/" target="_blank" rel="external">官网</a></li>
<li>Orbit：支持虚拟角色（Actor），在传统角色的基础上增加了另外一层抽象。<a href="http://orbit.bioware.com/" target="_blank" rel="external">官网</a></li>
<li>Quasar：为JVM提供轻量级线程和角色。<a href="http://www.paralleluniverse.co/quasar/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="distributed-databases">分布式数据库</h3><br><em>对应用程序而言，在分布式系统中的数据库看起来就像是只有一个数据源。</em><p></p>
<ul>
<li>Apache Cassandra：列式数据库，可用性高且没有单点故障。<a href="http://cassandra.apache.org" target="_blank" rel="external">官网</a></li>
<li>Apache HBase：针对大数据的Hadoop数据库。<a href="http://hbase.apache.org" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/druid/" target="_blank" rel="external">Druid</a>：实时和历史OLAP数据存储，在聚集查询和近似查询方面表现不俗。<a href="http://druid.io" target="_blank" rel="external">官网</a></li>
<li>Infinispan：针对缓存的高并发键值对数据存储。<a href="http://infinispan.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="distribution">发布</h3><br><em>以本机格式发布应用程序的工具。</em><p></p>
<ul>
<li>Bintray：发布二进制文件版本控制工具。可以于Maven或Gradle一起配合使用。提供开源免费版本和几种商业收费版本。<a href="https://bintray.com/" target="_blank" rel="external">官网</a></li>
<li>Central Repository：最大的二进制组件仓库，面向开源社区提供免费服务。Apache Maven默认使用Central <a href="http://search.maven.org/" target="_blank" rel="external">官网</a>Repository，也可以在所有其他构建工具中使用。</li>
<li>IzPack：为跨平台部署建立创作工具（Authoring Tool）。<a href="http://izpack.org/" target="_blank" rel="external">官网</a></li>
<li>JitPack：打包GitHub仓库的便捷工具。可根据需要构建Maven、Gradle项目，发布可立即使用的组件。<a href="https://jitpack.io/" target="_blank" rel="external">官网</a></li>
<li>Launch4j：将JAR包装为轻量级本机Windows可执行程序。<a href="http://launch4j.sourceforge.net/" target="_blank" rel="external">官网</a></li>
<li>Nexus：支持代理和缓存功能的二进制管理工具。<a href="http://www.sonatype.com/nexus" target="_blank" rel="external">官网</a></li>
<li>packr：将JAR、资源和JVM打包成Windows、Linux和Mac OS X本地发布文件。<a href="https://github.com/libgdx/packr/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="document-processing">文档处理工具</h3><br><em>处理Office文档的开发库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/poi/" target="_blank" rel="external">Apache POI</a>：支持OOXML规范（XLSX、DOCX、PPTX）以及OLE2规范（XLS、DOC、PPT）。<a href="http://poi.apache.org/" target="_blank" rel="external">官网</a></li>
<li>documents4j：使用第三方转换器进行文档格式转换，转成类似MS Word这样的格式。<a href="http://documents4j.com" target="_blank" rel="external">官网</a></li>
<li>jOpenDocument：处理OpenDocument格式（由Sun公司提出基于XML的文档格式）。<a href="http://www.jopendocument.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="functional-programming">函数式编程</h3><br><em>函数式编程支持库。</em><p></p>
<ul>
<li>Cyclops：支持一元（Monad）操作和流操作工具类、comprehension（List语法）、模式匹配、trampoline等特性。<a href="https://github.com/aol/cylops" target="_blank" rel="external">官网</a></li>
<li>Fugue：Guava的函数式编程扩展。<a href="https://bitbucket.org/atlassian/fugue" target="_blank" rel="external">官网</a></li>
<li>Functional Java：实现了多种基础和高级编程抽象，用来辅助面向组合开发（composition-oriented development）。<a href="http://www.fuctionaljava.org" target="_blank" rel="external">官网</a></li>
<li>Javaslang：一个函数式组件库，提供持久化数据类型和函数式控制结构。<a href="http://javaslang.com" target="_blank" rel="external">官网</a></li>
<li>jOOλ：旨在填补Java 8 lambda差距的扩展，提供了众多缺失的类型和一组丰富的顺序流API。<a href="https://github.com/jOOQ/jOOL" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="game-development">游戏开发</h3><br><em>游戏开发框架。</em><p></p>
<ul>
<li>jMonkeyEngine：现代3D游戏开发引擎。<a href="http://jmonkeyengine.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/libgdx/" target="_blank" rel="external">libGDX</a>：全面的跨平台高级框架。<a href="https://libgdx.badlogicgames.com/" target="_blank" rel="external">官网</a></li>
<li>LWJGL：对OpenGL/CL/AL等技术进行抽象的健壮框架。<a href="https://www.lwjgl.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="gui">GUI</h3><br><em>现代图形化用户界面开发库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/javafx/" target="_blank" rel="external">JavaFX</a>：Swing的后继者。<a href="http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/scene_builder/" target="_blank" rel="external">Scene Builder</a>：开发JavaFX应用的可视化布局工具。<a href="http://docs.oracle.com/javase/8/scene-builder-2/get-started-tutorial/overview.htm#JSBGS164" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="high-performance">高性能计算</h3><br><em>涵盖了从集合到特定开发库的高性能计算相关工具。</em><p></p>
<ul>
<li>Agrona：高性能应用中常见的数据结构和工具方法。<a href="https://github.com/real-logic/Agrona" target="_blank" rel="external">官网</a></li>
<li>Disruptor：线程间消息传递开发库。<a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="external">官网</a></li>
<li>fastutil：快速紧凑的特定类型集合（Collection）。<a href="http://fastutil.di.unimi.it/" target="_blank" rel="external">官网</a></li>
<li>GS Collections：受Smalltalk启发的集合框架。<a href="https://github.com/goldmansachs/gs-collections" target="_blank" rel="external">官网</a></li>
<li>HPPC：基础类型集合。<a href="http://labs.carrotsearch.com/hppc.html" target="_blank" rel="external">官网</a></li>
<li>Javolution：实时和嵌入式系统的开发库。<a href="http://javolution.org/" target="_blank" rel="external">官网</a></li>
<li>JCTools：JDK中缺失的并发工具。<a href="https://github.com/JCTools/JCTools" target="_blank" rel="external">官网</a></li>
<li>Koloboke：Hash set和hash map。<a href="https://github.com/OpenHFT/Koloboke" target="_blank" rel="external">官网</a></li>
<li>Trove：基础类型集合。<a href="http://trove.starlight-systems.com/" target="_blank" rel="external">官网</a></li>
<li>High-scale-bli:Cliff Click 个人开发的高性能并发库<a href="https://github.com/stephenc/high-scale-lib" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="ide">IDE</h3><br><em>简化开发的集成开发环境。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/eclipse/" target="_blank" rel="external">Eclipse</a>：老牌开源项目，支持多种插件和编程语言。<a href="http://www.eclipse.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/intellij-idea/" target="_blank" rel="external">IntelliJ IDEA</a>：支持众多JVM语言，是安卓开发者好的选择。商业版主要针对企业客户。<a href="http://www.jetbrains.com/idea/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/netbeans/" target="_blank" rel="external">NetBeans</a>：为多种技术提供集成化支持，包括Java SE、Java EE、数据库访问、HTML5等。<a href="https://netbeans.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/scala-ide/" target="_blank" rel="external">Scala IDE</a>：一款基于Eclipse开源平台打造的Scala集成开发环境。<a href="http://scala-ide.org/" target="_blank" rel="external">官网</a></li>
<li>SpringSource Tool Suite（sts):一款基于Eclipse开源平台打造的spring应用开发环境。<a href="http://spring.io/tools/sts/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="imagery">图像处理</h3><br><em>创建、评价和操作图片的支持库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/imgscalr/" target="_blank" rel="external">Imgscalr</a>：纯Java 2D实现，简单、高效、支持硬件加速的图像缩放开发库。<a href="https://github.com/thebuzzmedia/imgscalr" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/picasso/" target="_blank" rel="external">Picasso</a>：安卓图片下载和图片缓存开发库。<a href="http://square.github.io/picasso/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/thumbnailator/" target="_blank" rel="external">Thumbnailator</a>：Thumbnailator是一个高质量Java缩略图开发库。<a href="https://github.com/coobird/thumbnailator" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/zxing/" target="_blank" rel="external">ZXing</a>：支持多种格式的一维、二维条形码图片处理开发库。<a href="https://github.com/zxing/zxing" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/im4java/" target="_blank" rel="external">im4java</a>: 基于ImageMagick或GraphicsMagick命令行的图片处理开发库，基本上ImageMagick能够支持的图片格式和处理方式都能够处理。<a href="http://im4java.sourceforge.net/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="json">JSON</h3><br><em>简化JSON处理的开发库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/genson/" target="_blank" rel="external">Genson</a>：强大且易于使用的Java到JSON转换开发库。<a href="http://owlike.github.io/genson" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/gson/" target="_blank" rel="external">Gson</a>：支持在对象与JSON之间双向序列化，性能良好且可以实时调用。<a href="https://github.com/google/gson" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jackson/" target="_blank" rel="external">Jackson</a>：与GSON类似，在频繁使用时性能更佳。<a href="http://wiki.fasterxml.com/JacksonHome" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/logansquare/" target="_blank" rel="external">LoganSquare</a>：基于Jackson流式API，提供对JSON解析和序列化。比GSON与Jackson组合方式效果更好。<a href="https://github.com/bluelinelabs/LoganSquare" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/fastjson/" target="_blank" rel="external">Fastjson</a>: 一个Java语言编写的高性能功能完善的JSON库。<a href="https://github.com/Alibaba/fastjson" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="jvm-and-jdk">JVM与JDK</h3><br><em>目前的JVM和JDK实现。</em><p></p>
<ul>
<li>JDK 9：JDK 9的早期访问版本。<a href="https://jdk9.java.net/" target="_blank" rel="external">官网</a></li>
<li>OpenJDK：JDK开源实现。<a href="http://openjdk.java.net/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="languages">基于JVM的语言</h3><br><em>除Java外，可以用来编写JVM应用程序的编程语言。</em><p></p>
<ul>
<li>Scala：融合了面向对象和函数式编程思想的静态类型编程语言。<a href="http://www.scala-lang.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/groovy/" target="_blank" rel="external">Groovy</a>：类型可选（Optionally typed）的动态语言，支持静态类型和静态编译。目前是一个Apache孵化器项目。<a href="http://www.groovy-lang.org/" target="_blank" rel="external">官网</a></li>
<li>Clojure：可看做现代版Lisp的动态类型语言。<a href="http://clojure.org/" target="_blank" rel="external">官网</a></li>
<li>Ceylon：RedHat开发的面向对象静态类型编程语言。<a href="http://ceylon-lang.org/" target="_blank" rel="external">官网</a></li>
<li>Kotlin：JetBrain针对JVM、安卓和浏览器提供的静态类型编程语言。<a href="http://kotlinlang.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/xtend/" target="_blank" rel="external">Xtend</a>：一种静态编程语言，能够将其代码转换为简洁高效的Java代码，并基于JVM运行。<a href="http://www.eclipse.org/xtend/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="logging">日志</h3><br><em>记录应用程序行为日志的开发库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/log4j2/" target="_blank" rel="external">Apache Log4j 2</a>：使用强大的插件和配置架构进行完全重写。<a href="http://logging.apache.org/log4j/" target="_blank" rel="external">官网</a></li>
<li>kibana：分析及可视化日志文件。<a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">官网</a></li>
<li>Logback：强健的日期开发库，通过Groovy提供很多有趣的选项。<a href="http://logback.qos.ch/" target="_blank" rel="external">官网</a></li>
<li>logstash：日志文件管理工具。<a href="https://www.elastic.co/products/logstash" target="_blank" rel="external">官网</a></li>
<li>Metrics：通过JMX或HTTP发布参数，并且支持存储到数据库。<a href="https://github.com/dropwizard/metrics" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/slf4j/" target="_blank" rel="external">SLF4J</a>：日志抽象层，需要与具体的实现配合使用。<a href="http://www.slf4j.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="machine-learning">机器学习</h3><br><em>提供具体统计算法的工具。其算法可从数据中学习。</em><p></p>
<ul>
<li>Apache Flink：快速、可靠的大规模数据处理引擎。<a href="https://flink.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Apache Hadoop：在商用硬件集群上用来进行大规模数据存储的开源软件框架。<a href="http://hadoop.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Apache Mahout：专注协同过滤、聚类和分类的可扩展算法。<a href="https://mahout.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Apache Spark：开源数据分析集群计算框架。<a href="http://spark.apache.org/" target="_blank" rel="external">官网</a></li>
<li>DeepDive：从非结构化数据建立结构化信息并集成到已有数据库的工具。<a href="http://deepdive.stanford.edu" target="_blank" rel="external">官网</a></li>
<li>Deeplearning4j：分布式多线程深度学习开发库。<a href="http://deeplearning4j.org/" target="_blank" rel="external">官网</a></li>
<li>H2O：用作大数据统计的分析引擎。<a href="http://h2o.ai/" target="_blank" rel="external">官网</a></li>
<li>Weka：用作数据挖掘的算法集合，包括从预处理到可视化的各个层次。<a href="http://www.cs.waikato.ac.nz/ml/weka/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="messaging">消息传递</h3><br><em>在客户端之间进行消息传递，确保协议独立性的工具。</em><p></p>
<ul>
<li>Aeron：高效可扩展的单播、多播消息传递工具。<a href="https://github.com/real-logic/Aeron" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/activemq/" target="_blank" rel="external">Apache ActiveMQ</a>：实现JMS的开源消息代理（broker），可将同步通讯转为异步通讯。<a href="http://activemq.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Apache Camel：通过企业级整合模式（Enterprise Integration Pattern EIP）将不同的消息传输API整合在一起。<a href="http://camel.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/kafka/" target="_blank" rel="external">Apache Kafka</a>：高吞吐量分布式消息系统。<a href="http://kafka.apache.org/" target="_blank" rel="external">官网</a></li>
<li>Hermes：快速、可靠的消息代理（Broker），基于Kafka构建。<a href="http://hermes.allegro.tech" target="_blank" rel="external">官网</a></li>
<li>JBoss HornetQ：清晰、准确、模块化，可以方便嵌入的消息工具。<a href="http://hornetq.jboss.org/" target="_blank" rel="external">官网</a></li>
<li>JeroMQ：ZeroMQ的纯Java实现。<a href="https://github.com/zeromq/jeromq" target="_blank" rel="external">官网</a></li>
<li>Smack：跨平台XMPP客户端函数库。<a href="https://github.com/igniterealtime/Smack/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="miscellaneous">杂项</h3><br><em>未分类其它资源。</em><p></p>
<ul>
<li>Design Patterns：实现并解释了最常见的设计模式。<a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="external">官网</a></li>
<li>Jimfs：内存文件系统。<a href="https://github.com/google/jimfs" target="_blank" rel="external">官网</a></li>
<li>Lanterna：类似curses的简单console文本GUI函数库。<a href="https://code.google.com/p/lanterna/" target="_blank" rel="external">官网</a></li>
<li>LightAdmin：可插入式CRUD UI函数库，可用来快速应用开发。<a href="http://lightadmin.org/" target="_blank" rel="external">官网</a></li>
<li>OpenRefine：用来处理混乱数据的工具，包括清理、转换、使用Web Service进行扩展并将其关联到数据库。<a href="http://openrefine.org/" target="_blank" rel="external">官网</a></li>
<li>RoboVM：Java编写原生iOS应用。<a href="https://robovm.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/quartz/" target="_blank" rel="external">Quartz</a>：强大的任务调度库.<a href="http://www.quartz-scheduler.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="monitoring">应用监控工具</h3><br><em>监控生产环境中应用程序的工具。</em><p></p>
<ul>
<li>AppDynamics：性能监测商业工具。<a href="http://www.appdynamics.com/" target="_blank" rel="external">官网</a></li>
<li>JavaMelody：性能监测和分析工具。<a href="https://github.com/javamelody/javamelody" target="_blank" rel="external">官网</a></li>
<li>Kamon：Kamon用来监测在JVM上运行的应用程序。<a href="http://www.kamon.io/" target="_blank" rel="external">官网</a></li>
<li>New Relic：性能监测商业工具。<a href="http://newrelic.com/" target="_blank" rel="external">官网</a></li>
<li>SPM：支持对JVM应用程序进行分布式事务追踪的性能监测商业工具。<a href="https://sematext.com/spm/" target="_blank" rel="external">官网</a></li>
<li>Takipi：产品运行时错误监测及调试商业工具。<a href="https://www.takipi.com/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="native">原生开发库</h3><br><em>用来进行特定平台开发的原生开发库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/jna/" target="_blank" rel="external">JNA</a>：不使用JNI就可以使用原生开发库。此外，还为常见系统函数提供了接口。<a href="https://github.com/java-native-access/jna" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="natural-language-processing">自然语言处理</h3><br><em>用来专门处理文本的函数库。</em><p></p>
<ul>
<li>Apache OpenNLP：处理类似分词等常见任务的工具。<a href="https://opennlp.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/stanford_corenlp/" target="_blank" rel="external">CoreNLP</a>：斯坦佛CoreNLP提供了一组基础工具，可以处理类似标签、实体名识别和情感分析这样的任务。<a href="http://nlp.stanford.edu/software/coenlp.shtml" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/lingpipe/" target="_blank" rel="external">LingPipe</a>：一组可以处理各种任务的工具集，支持POS标签、情感分析等。<a href="http://alias-i.com/lingpipe/" target="_blank" rel="external">官网</a></li>
<li>Mallet：统计学自然语言处理、文档分类、聚类、主题建模等。<a href="http://mallet.cs.umass.edu/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="networking">网络</h3><br><em>网络编程函数库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/async-http-client/" target="_blank" rel="external">Async Http Client</a>：异步HTTP和WebSocket客户端函数库。<a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/grizzly/" target="_blank" rel="external">Grizzly</a>：NIO框架，在Glassfish中作为网络层使用。<a href="https://grizzly.java.net/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/netty/" target="_blank" rel="external">Netty</a>：构建高性能网络应用程序开发框架。<a href="http://netty.io/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/okhttp/" target="_blank" rel="external">OkHttp</a>：一个Android和Java应用的HTTP+SPDY客户端。<a href="http://square.github.io/okhttp/" target="_blank" rel="external">官网</a></li>
<li>Undertow：基于NIO实现了阻塞和非阻塞API的Web服务器，在WildFly中作为网络层使用。<a href="http://undertow.io/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="orm">ORM</h3><br><em>处理对象持久化的API。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/ebean/" target="_blank" rel="external">Ebean</a>：支持快速数据访问和编码的ORM框架。<a href="http://ebean-orm.github.io/" target="_blank" rel="external">官网</a></li>
<li>EclipseLink：支持许多持久化标准，JPA、JAXB、JCA和SDO。<a href="https://www.eclipse.org/eclipselink/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/hibernate/" target="_blank" rel="external">Hibernate</a>：广泛使用、强健的持久化框架。Hibernate的技术社区非常活跃。<a href="http://hibernate.org/orm/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/mybatis/" target="_blank" rel="external">MyBatis</a>：带有存储过程或者SQL语句的耦合对象（Couples object）。<a href="http://mybatis.github.io/mybatis-3/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/ormlite/" target="_blank" rel="external">OrmLite</a>：轻量级开发包，免除了其它ORM产品中的复杂性和开销。<a href="http://ormlite.com/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="pdf">PDF</h3><br><em>用来帮助创建PDF文件的资源。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/apache_fop/" target="_blank" rel="external">Apache FOP</a>：从XSL-FO创建PDF。<a href="http://xmlgraphics.apache.org/fop/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-pdfbox/" target="_blank" rel="external">Apache PDFBox</a>：用来创建和操作PDF的工具集。<a href="http://pdfbox.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/dynamicreports/" target="_blank" rel="external">DynamicReports</a>：JasperReports的精简版。<a href="http://dynamicreports.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/flyingsaucer/" target="_blank" rel="external">flyingsaucer</a>：XML/XHTML和CSS 2.1渲染器。<a href="https://github.com/flyingsaucerproject/flyingsaucer" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/itext/" target="_blank" rel="external">iText</a>：一个易于使用的PDF函数库，用来编程创建PDF文件。注意，用于商业用途时需要许可证。<a href="http://itextpdf.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jasperreports/" target="_blank" rel="external">JasperReports</a>：一个复杂的报表引擎。<a href="http://community.jaspersoft.com/project/jasperreports-library" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="performance-analysis">性能分析</h3><br><em>性能分析、性能剖析及基准测试工具。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/jhiccup/" target="_blank" rel="external">jHiccup</a>：提供平台中JVM暂停的日志和记录。<a href="https://github.com/giltene/jHiccup" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jmh/" target="_blank" rel="external">JMH</a>：JVM基准测试工具。<a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jprofiler/" target="_blank" rel="external">JProfiler</a>：商业分析器。<a href="https://www.ej-technologies.com/products/jprofiler/overview.html" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/latencyutils/" target="_blank" rel="external">LatencyUtils</a>：测量和报告延迟的工具。<a href="https://github.com/LatencyUtils/LatencyUtils" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/visualvm/" target="_blank" rel="external">VisualVM</a>：对运行中的应用程序信息提供了可视化界面。<a href="http://visualvm.java.net/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/yourkit-java-profiler/" target="_blank" rel="external">YourKit Java Profiler</a>：商业分析器。<a href="https://www.yourkit.com/features/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="reactive-libraries">响应式开发库</h3><br><em>用来开发响应式应用程序的开发库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/reactive-streams/" target="_blank" rel="external">Reactive Streams</a>：异步流处理标准，支持非阻塞式反向压力（backpressure）。<a href="https://github.com/reactive-streams/reactive-streams-jv/" target="_blank" rel="external">官网</a></li>
<li>Reactor：构建响应式快速数据（fast-data）应用程序的开发库。<a href="http://projectreactor.io/" target="_blank" rel="external">官网</a></li>
<li>RxJava：通过JVM可观察序列（observable sequence）构建异步和基于事件的程序。<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="rest-frameworks">REST框架</h3><br><em>用来创建RESTful 服务的框架。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/dropwizard/" target="_blank" rel="external">Dropwizard</a>：偏向于自己使用的Web框架。用来构建Web应用程序，使用了Jetty、Jackson、Jersey和Metrics。<a href="https://dropwizard.github.io/drpwizard/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/feign/" target="_blank" rel="external">Feign</a>：受Retrofit、JAXRS-2.0和WebSocket启发的HTTP客户端连接器（binder）。<a href="https://github.com/Netflix/feign" target="_blank" rel="external">官网</a></li>
<li>Jersey：JAX-RS参考实现。<a href="https://jersey.java.net/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/resteasy/" target="_blank" rel="external">RESTEasy</a>：经过JAX-RS规范完全认证的可移植实现。<a href="http://resteasy.jboss.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/restexpress/" target="_blank" rel="external">RestExpress</a>：一个Java类型安全的REST客户端。<a href="https://github.com/RestExpress/RestExpress" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/restx/" target="_blank" rel="external">RestX</a>：基于注解处理和编译时源码生成的框架。<a href="http://restx.io" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/retrofit/" target="_blank" rel="external">Retrofit</a>：类型安全的REST客户端。<a href="http://square.github.io/retrofit/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/sparkjava/" target="_blank" rel="external">Spark</a>：受到Sinatra启发的Java REST框架。<a href="http://sparkjava.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/swagger/" target="_blank" rel="external">Swagger</a>：Swagger是一个规范且完整的框架，提供描述、生产、消费和可视化RESTful Web Service。<a href="http://swagger.io/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/bladejava/" target="_blank" rel="external">Blade</a>：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。<a href="https://github.com/biezhi/blade" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="science">科学计算与分析</h3><br><em>用于科学计算和分析的函数库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/datamelt/" target="_blank" rel="external">DataMelt</a>：用于科学计算、数据分析及数据可视化的开发环境。<a href="http://jwork.org/dmelt/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jgrapht/" target="_blank" rel="external">JGraphT</a>：支持数学图论对象和算法的图形库。<a href="https://github.com/jgrapht/jgrapht" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jscience/" target="_blank" rel="external">JScience</a>：用来进行科学测量和单位的一组类。<a href="http://jscience.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="search">搜索引擎</h3><br><em>文档索引引擎，用于搜索和分析。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/solr/" target="_blank" rel="external">Apache Solr</a>：一个完全的企业搜索引擎。为高吞吐量通信进行了优化。<a href="http://lucene.apache.org/solr/" target="_blank" rel="external">官网</a></li>
<li>Elasticsearch：一个分布式、支持多租户（multitenant）全文本搜索引擎。提供了RESTful Web接口和无schema的JSON文档。<a href="http://www.elsticsearch.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="security">安全</h3><br><em>用于处理安全、认证、授权或会话管理的函数库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/shiro/" target="_blank" rel="external">Apache Shiro</a>：执行认证、授权、加密和会话管理。<a href="http://shiro.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/bouncy-castle/" target="_blank" rel="external">Bouncy Castle</a>，涵盖了从基础的帮助函数到PGP/SMIME操作。<a href="https://www.bouncycastle.org/java.html" target="_blank" rel="external">官网</a>：多途加密开发库。支持JCA提供者（JCA provider)</li>
<li><a href="http://hao.jobbole.com/cryptomator/" target="_blank" rel="external">Cryptomator</a>：在云上进行客户端跨平台透明加密。<a href="https://cryptomator.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/keycloak/" target="_blank" rel="external">Keycloak</a>：为浏览器应用和RESTful Web Service集成SSO和IDM。目前还处于beta版本，但是看起来非常有前途。<a href="http://keycloak.jboss.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/picketlink/" target="_blank" rel="external">PicketLink</a>：PicketLink是一个针对Java应用进行安全和身份认证管理的大型项目（Umbrella Project）。<a href="http://picketlink.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="serialization">序列化</h3><br><em>用来高效处理序列化的函数库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/flatbuffers/" target="_blank" rel="external">FlatBuffers</a>：高效利用内存的序列化函数库，无需解包和解析即可高效访问序列化数据。<a href="https://github.com/google/flatbuffers" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/kryo/" target="_blank" rel="external">Kryo</a>：快速、高效的对象图形序列化框架。<a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/fst/" target="_blank" rel="external">FST</a>：提供兼容JDK的高性能对象图形序列化。<a href="https://github.com/RuedigerMoeller/fast-serialization" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/messagepack/" target="_blank" rel="external">MessagePack</a>：一种高效的二进制序列化格式。<a href="https://github.com/msgpack/msgpack-java" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="server">应用服务器</h3><br><em>用来部署应用程序的服务器。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-tomcat/" target="_blank" rel="external">Apache Tomcat</a>：针对Servlet和JSP的应用服务器，健壮性好且适用性强。<a href="http://tomcat.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/tomee/" target="_blank" rel="external">Apache TomEE</a>：Tomcat加Java EE。<a href="http://tomee.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jetty/" target="_blank" rel="external">Jetty</a>：轻量级、小巧的应用服务器，通常会嵌入到项目中。<a href="http://www.eclipse.org/jetty/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/websphere-liberty/" target="_blank" rel="external">WebSphere Liberty</a>：轻量级、模块化应用服务器，由IBM开发。<a href="https://developer.ibm.com/wasdev/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/wildfly/" target="_blank" rel="external">WildFly</a>：之前被称作JBoss，由Red Hat开发。支持很多Java EE功能。<a href="http://www.wildfly.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="template-engine">模板引擎</h3><br><em>在模板中替换表达式的工具。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/velocity/" target="_blank" rel="external">Apache Velocity</a>：提供HTML页面模板、email模板和通用开源代码生成器模板。<a href="http://velocity.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/freemarker/" target="_blank" rel="external">FreeMarker</a>：通用模板引擎，不需要任何重量级或自己使用的依赖关系。<a href="http://freemarker.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/handlebars-java/" target="_blank" rel="external">Handlebars.java</a>：使用Java编写的模板引擎，逻辑简单，支持语义扩展（semantic Mustache）。<a href="http://jknack.github.io/handlebars.java/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/thymeleaf/" target="_blank" rel="external">Thymeleaf</a>：旨在替换JSP，支持XML文件的工具。<a href="http://www.thymeleaf.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="testing">测试</h3><br><em>测试内容从对象到接口，涵盖性能测试和基准测试工具。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/jmeter/" target="_blank" rel="external">Apache JMeter</a>：功能性测试和性能评测。<a href="http://jmeter.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/arquillian/" target="_blank" rel="external">Arquillian</a>：集成测试和功能行测试平台，集成Java EE容器。<a href="http://arquillian.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/assertj/" target="_blank" rel="external">AssertJ</a>：支持流式断言提高测试的可读性。<a href="http://joel-costigliola.github.io/assertj/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/awaitility/" target="_blank" rel="external">Awaitility</a>：用来同步异步操作的DSL。<a href="https://github.com/jayway/awaitility" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/cucumber-jvm/" target="_blank" rel="external">Cucumber</a>：BDD测试框架。<a href="https://github.com/cucumber/cucumber-jvm" target="_blank" rel="external">官网</a></li>
<li>Gatling：设计为易于使用、可维护的和高性能负载测试工具。<a href="http://gatling.io/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/hamcrest/" target="_blank" rel="external">Hamcrest</a>：可用来灵活创建意图（intent）表达式的匹配器。<a href="http://hamcrest.org/JavaHamcrest/" target="_blank" rel="external">官网</a></li>
<li>JMockit：用来模拟静态、final方法等。<a href="http://jmockit.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/junit/" target="_blank" rel="external">JUnit</a>：通用测试框架。<a href="http://junit.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/mockito/" target="_blank" rel="external">Mockito</a>：在自动化单元测试中创建测试对象，为TDD或BDD提供支持。<a href="https://github.com/mockito/mockito" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/powermock/" target="_blank" rel="external">PowerMock</a>： 支持模拟静态方法、构造函数、final类和方法、私有方法以及移除静态初始化器的模拟工具。<a href="https://github.com/jayway/powermock" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/rest-assured/" target="_blank" rel="external">REST Assured</a>：为REST/HTTP服务提供方便测试的Java DSL。<a href="https://github.com/jayway/rest-assured" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/selenide/" target="_blank" rel="external">Selenide</a>：为Selenium提供精准的周边API，用来编写稳定且可读的UI测试。<a href="http://selenide.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/selenium/" target="_blank" rel="external">Selenium</a>：为Web应用程序提供可移植软件测试框架。<a href="http://docs.seleniumhq.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/spock/" target="_blank" rel="external">Spock</a>：JUnit-compatible framework featuring an expressive Groovy-derived specification language.<a href="http://docs.spockframework.org/" target="_blank" rel="external">官网</a>兼容JUnit框架，支持衍生的Groovy范的语言。</li>
<li><a href="http://hao.jobbole.com/testng/" target="_blank" rel="external">TestNG</a>：测试框架。<a href="http://testng.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/truth/" target="_blank" rel="external">Truth</a>：Google的断言和命题（proposition）框架。<a href="https://github.com/google/truth" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/unitils/" target="_blank" rel="external">Unitils</a>：模块化测试函数库，支持单元测试和集成测试。<a href="http://www.unitils.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/wiremock/" target="_blank" rel="external">WireMock</a>：Web Service测试桩（Stub）和模拟函数。<a href="http://wiremock.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="utility">通用工具库</h3><br><em>通用工具类函数库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-commons/" target="_blank" rel="external">Apache Commons</a>：提供各种用途的函数，比如配置、验证、集合、文件上传或XML处理等。<a href="http://commons.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/args4j/" target="_blank" rel="external">args4j</a>：命令行参数解析器。<a href="http://args4j.kohsuke.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/crash/" target="_blank" rel="external">CRaSH</a>：为运行进行提供CLI。<a href="http://www.crashub.org" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/gephi/" target="_blank" rel="external">Gephi</a>：可视化跨平台网络图形化操作程序。<a href="https://github.com/gephi/gephi/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/guava/" target="_blank" rel="external">Guava</a>：集合、缓存、支持基本类型、并发函数库、通用注解、字符串处理、I/O等。<a href="https://github.com/google/guava" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jade/" target="_blank" rel="external">JADE</a>：构建、调试多租户系统的框架和环境。<a href="http://jade.tilab.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/javatuples/" target="_blank" rel="external">javatuples</a>：正如名字表示的那样，提供tuple支持。尽管目前tuple的概念还有留有争议。<a href="http://www.javatuples.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jcommander/" target="_blank" rel="external">JCommander</a>：命令行参数解析器。<a href="http://jcommander.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/protege/" target="_blank" rel="external">Protégé</a>：提供存在论（ontology）编辑器以及构建知识系统的框架。<a href="http://protege.stanford.edu/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="web-crawling">网络爬虫</h3><br><em>用于分析网站内容的函数库。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/nutch/" target="_blank" rel="external">Apache Nutch</a>：可用于生产环境的高度可扩展、可伸缩的网络爬虫。<a href="http://nutch.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/crawler4j/" target="_blank" rel="external">Crawler4j</a>：简单的轻量级网络爬虫。<a href="https://github.com/yasserg/crawler4j" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jsoup/" target="_blank" rel="external">JSoup</a>：刮取、解析、操作和清理HTML。<a href="http://jsoup.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="web-frameworks">Web框架</h3><br><em>用于处理Web应用程序不同层次间通讯的框架。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-tapestry/" target="_blank" rel="external">Apache Tapestry</a>：基于组件的框架，使用Java创建动态、强健的、高度可扩展的Web应用程序。<a href="http://tapestry.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-wicket/" target="_blank" rel="external">Apache Wicket</a>：基于组件的Web应用框架，与Tapestry类似带有状态显示GUI。<a href="http://wicket.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/gwt/" target="_blank" rel="external">Google Web Toolkit</a>：一组Web开发工具集，包含在客户端将Java代码转为JavaScript的编译器、XML解析器、RCP <a href="http://www.gwtproject.org/" target="_blank" rel="external">官网</a>API、JUnit集成、国际化支持和GUI控件。</li>
<li><a href="http://hao.jobbole.com/grails/" target="_blank" rel="external">Grails</a>：Groovy框架，旨在提供一个高效开发环境，使用约定而非配置、没有XML并支持混入（mixin）。<a href="https://grails.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/ninja/" target="_blank" rel="external">Ninja</a>：Java全栈Web开发框架。非常稳固、快速和高效。<a href="http://www.ninjaframework.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pippo/" target="_blank" rel="external">Pippo</a>：小型、高度模块化的类Sinatra框架。<a href="http://www.pippo.ro/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/play-framework/" target="_blank" rel="external">Play</a>：使用约定而非配置，支持代码热加载并在浏览器中显示错误。<a href="https://www.playframework.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/primefaces/" target="_blank" rel="external">PrimeFaces</a>：JSF框架，提供免费和带支持的商业版本。包括若干前端组件。<a href="http://primefaces.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/ratpack/" target="_blank" rel="external">Ratpack</a>：一组Java开发函数库，用于构建快速、高效、可扩展且测试完备的HTTP应用程序。<a href="https://ratpack.io/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/spring-boot/" target="_blank" rel="external">Spring Boot</a>：微框架，简化了Spring新程序的开发过程。<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/spring-framework/" target="_blank" rel="external">Spring</a>：旨在简化Java EE的开发过程，提供依赖注入相关组件并支持面向切面编程。<a href="http://projects.spring.io/spring-framework/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/vaadin/" target="_blank" rel="external">Vaadin</a>：基于GWT构建的事件驱动框架。使用服务端架构，客户端使用Ajax。<a href="https://vaadin.com/" target="_blank" rel="external">官网</a></li>
<li>Blade：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。<a href="https://github.com/biezhi/blade" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="Business-Process-Management">业务流程管理套件</h3><br><em>流程驱动的软件系统构建。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/jbpm/" target="_blank" rel="external">jBPM</a>：非常灵活的业务流程管理框架，致力于构建开发与业务分析人员之间的桥梁。<a href="http://www.jbpm.org/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h2 id="resources">资源</h2><p></p>
<p></p><h3 id="communities">社区</h3><p></p>
<ul>
<li>r/java：Reddit的Java子社区。<a href="https://www.reddit.com/r/java" target="_blank" rel="external">官网</a></li>
<li>stackoverflow：问答平台。<a href="http://stackoverflow.com/questions/tagged/java" target="_blank" rel="external">官网</a></li>
<li>vJUG：虚拟Java用户组。<a href="http://virtualjug.com/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="influential-books">有影响力的书</h3><br><em>具有广泛影响且值得阅读的Java经典书籍。</em><p></p>
<ul>
<li><a href="http://hao.jobbole.com/effective-java/" target="_blank" rel="external">Effective Java (2nd Edition)</a></li>
<li><a href="http://hao.jobbole.com/java-8-in-action/" target="_blank" rel="external">Java 8 in Action</a></li>
<li><a href="http://hao.jobbole.com/java-concurrency-in-practice/" target="_blank" rel="external">Java Concurrency in Practice | Java并发编程实战</a></li>
<li><a href="http://hao.jobbole.com/thinking-in-java/" target="_blank" rel="external">Thinking in Java | Java编程思想</a></li>
<li><a href="http://hao.jobbole.com/java-puzzlers/" target="_blank" rel="external">Java Puzzlers | Java解惑</a></li>
</ul>
<p></p><h3 id="podcasts">播客</h3><br><em>可以一边编程一边听的东西。</em><p></p>
<ul>
<li>Java Council：<a href="http://virtualjug.com/podcast/" target="_blank" rel="external">官网</a></li>
<li>Java Posse：Discontinued as of 02/2015.<a href="http://www.javaposse.com/" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="weibo-weixin">微博、微信公众号</h3><p></p>
<ul>
<li>ImportNew：是最受欢迎的、专注Java技术分享的微信公众号。专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。<br><br><img src="http://ww2.sinaimg.cn/small/63918611gw1epb2c7rv2uj20460463ym.jpg" alt=""></li>
<li>ImportNew 微博：<a href="http://weibo.com/importnew" target="_blank" rel="external">@ImportNew</a></li>
</ul>
<p></p><h3 id="twitter">Twitter</h3><p></p>
<ul>
<li><a href="https://twitter.com/AdamBien/" target="_blank" rel="external">Adam Bien</a>：自由职业者、作家、JavaONE明星演讲者、顾问、Java Champion。</li>
<li><a href="https://twitter.com/agoncal/" target="_blank" rel="external">Antonio Goncalves</a>：Java Champion、JUG Leader、Devoxx France、Java EE 6/7、JCP、作家。</li>
<li><a href="https://twitter.com/arungupta/" target="_blank" rel="external">Arun Gupta</a>：Java Champion、JavaONE明星演讲者、JUG Leader、Devoxx4Kids成员、Red Hatter。</li>
<li><a href="https://twitter.com/brunoborges" target="_blank" rel="external">Bruno Borges</a>：Oracle产品经理、Java Jock。</li>
<li><a href="https://twitter.com/edburns" target="_blank" rel="external">Ed Burns</a>：Oracle技术团队顾问。</li>
<li><a href="https://twitter.com/baeldung" target="_blank" rel="external">Eugen Paraschiv</a>：Spring安全课程作者。</li>
<li><a href="https://twitter.com/JavaFXpert" target="_blank" rel="external">James Weaver</a>：Java、JavaFX、IoT开发者、作者和演讲者。</li>
<li><a href="https://twitter.com/Java_EE/" target="_blank" rel="external">Java EE</a>：Java EE Twitter官方账号。</li>
<li><a href="https://twitter.com/Oraclejavamag" target="_blank" rel="external">Java Magazine</a>：Java杂志官方账号。</li>
<li><a href="https://twitter.com/javanetbuzz/" target="_blank" rel="external">Java.net</a>：Java.net官方账号。</li>
<li><a href="https://twitter.com/java/" target="_blank" rel="external">Java</a>：Java Twitter官方账号。</li>
<li><a href="https://twitter.com/javinpaul" target="_blank" rel="external">Javin Paul</a>：知名Java博客作者。</li>
<li><a href="https://twitter.com/lukaseder" target="_blank" rel="external">Lukas Eder</a>：Data Geekery（jOOQ）创始人兼CEO。</li>
<li><a href="https://twitter.com/mariofusco" target="_blank" rel="external">Mario Fusco</a>：RedHatter、JUG协调、活跃讲师和作者。</li>
<li><a href="https://twitter.com/mreinhold" target="_blank" rel="external">Mark Reinhold</a>：Oracle首席架构师、Java平台开发组。</li>
<li><a href="https://twitter.com/karianna" target="_blank" rel="external">Martijn Verburg</a>：London JUG co-leader、演讲者、作家、Java Champion等。</li>
<li><a href="https://twitter.com/OpenJDK" target="_blank" rel="external">OpenJDK</a>：OpenJDK官方账号。</li>
<li><a href="https://twitter.com/reza_rahman" target="_blank" rel="external">Reza Rahman</a>：Java EE、GlassFish、WebLogic传道者、作家、演讲者、开源黑客。</li>
<li><a href="https://twitter.com/sjmaple" target="_blank" rel="external">Simon Maple</a>：Java Champion、virtualJUG创始人、LJC leader、RebelLabs作者。</li>
<li><a href="https://twitter.com/jodastephen" target="_blank" rel="external">Stephen Colebourne</a>： Java Champion、演讲者。</li>
<li><a href="https://twitter.com/kablosna" target="_blank" rel="external">Tim Boudreau</a>：作家、NetBeans大牛。</li>
<li><a href="https://twitter.com/trisha_gee" target="_blank" rel="external">Trisha Gee</a>：Java Champion、演讲者。</li>
</ul>
<p></p><h3 id="websites">知名网站</h3><br><em>值得关注的Java技术站点。</em><p></p>
<h4>中文站点</h4>

<ul>
<li><a href="http://www.importnew.com/" target="_blank" rel="external">ImportNew</a>（ImportNew 专注 Java 技术）</li>
</ul>
<h4>英文站点</h4>

<ul>
<li><a href="https://android-arsenal.com" target="_blank" rel="external">Android Arsenal</a></li>
<li><a href="http://hao.jobbole.com/google-java-style/" target="_blank" rel="external">Google Java Style</a>：<a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/infoq/" target="_blank" rel="external">InfoQ</a>：<a href="http://www.infoq.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://www.javacodegeeks.com/" target="_blank" rel="external">Java Code Geeks</a></li>
<li><a href="http://blog.jooq.org/" target="_blank" rel="external">Java, SQL, and jOOQ</a></li>
<li><a href="http://java.net/" target="_blank" rel="external">Java.net</a></li>
<li><a href="http://java.dzone.com/" target="_blank" rel="external">Javalobby</a></li>
<li><a href="http://hao.jobbole.com/javaworld/" target="_blank" rel="external">JavaWorld</a>：<a href="http://www.javaworld.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/jaxenter/" target="_blank" rel="external">JAXenter</a>：<a href="https://jaxenter.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://zeroturnaround.com/rebellabs/" target="_blank" rel="external">RebelLabs</a></li>
<li><a href="http://hao.jobbole.com/javaspecialists/" target="_blank" rel="external">The Java Specialist’ Newsletter</a>：<a href="http://www.javaspecialists.eu/archive/archive.jsp" target="_blank" rel="external">官网</a></li>
<li><a href="http://blog.takipi.com/" target="_blank" rel="external">The Takipi Blog</a></li>
<li><a href="http://hao.jobbole.com/theserverside/" target="_blank" rel="external">TheServerSide.com</a>：服务器编程交流平台是一个老牌的IT信息网站，关注服务器端编程的，以Java和.Net周边信息为主。<a href="http://www.theserverside.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://www.thoughts-on-java.org/" target="_blank" rel="external">Thoughts On Java</a></li>
<li><a href="http://vanillajava.blogspot.ch/" target="_blank" rel="external">Vanilla Java</a></li>
<li><a href="http://vladmihalcea.com/" target="_blank" rel="external">Vlad Mihalcea on Hibernate</a></li>
<li><a href="https://www.voxxed.com/" target="_blank" rel="external">Voxxed</a></li>
<li><a href="http://hao.jobbole.com/onjava/" target="_blank" rel="external">OnJava</a>：O’Reilly Java包含最新的Java技术资讯，优质代码，完全的实例和详解。<a href="http://www.onjava.com/" target="_blank" rel="external">官网</a><iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>

</li>
</ul>]]></content>
    
    <summary type="html">
    
      内容包括：构建工具、数据库、框架、模板、安全、代码分析、日志、第三方库、书籍、Java 站点等
    
    </summary>
    
      <category term="Java" scheme="http://GitHubSupervise.io/blog/categories/Java/"/>
    
    
      <category term="java" scheme="http://GitHubSupervise.io/blog/tags/java/"/>
    
      <category term="资源" scheme="http://GitHubSupervise.io/blog/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>各种优秀资料、神器及框架</title>
    <link href="http://GitHubSupervise.io/blog/2017/01/02/professional-programmer/"/>
    <id>http://GitHubSupervise.io/blog/2017/01/02/professional-programmer/</id>
    <published>2017-01-01T21:40:27.000Z</published>
    <updated>2017-04-18T12:33:59.004Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>成为一名专业程序员的道路上，需要坚持练习、学习与积累，技术方面既要有一定的广度，更要有自己的深度。</p>
<p>各种优秀资料、神器及框架整理在此，毕竟好记性不如烂键盘，此项目可以作为自己的不时之需。</p>
<p>本人喜欢折腾，记录的东西也比较杂，各方面都会有一些，内容按重要等级排序，大家各取所需。</p>
<p>这里的东西会持续积累下去，欢迎Star，也欢迎发PR给我。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<ul>
<li><a href="#%E8%B5%84%E6%96%99%E7%AF%87">资料篇</a><ul>
<li><a href="#%E6%8A%80%E6%9C%AF%E7%AB%99%E7%82%B9">技术站点</a></li>
<li><a href="#%E5%BF%85%E7%9C%8B%E4%B9%A6%E7%B1%8D">必看书籍</a></li>
<li><a href="#%E5%A4%A7%E7%89%9B%E5%8D%9A%E5%AE%A2">大牛博客</a></li>
<li><a href="#github%E7%AF%87">GitHub篇</a></li>
</ul>
</li>
<li><a href="#%E5%B7%A5%E5%85%B7%E7%AF%87">工具篇</a><ul>
<li><a href="#%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7">平台工具</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">常用工具</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1">第三方服务</a></li>
<li><a href="#%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%B7%A5%E5%85%B7">爬虫相关(好玩的工具)</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3">安全相关</a></li>
<li><a href="#web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">Web服务器性能/压力测试工具/负载均衡器</a></li>
</ul>
</li>
<li><a href="#%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E5%85%B7">大数据处理/数据分析/分布式工具</a></li>
<li><a href="#web%E5%89%8D%E7%AB%AF">Web前端</a></li>
<li><a href="#%E8%AF%AD%E8%A8%80%E7%AF%87">语言篇</a><ul>
<li><a href="#scala">Scala</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#net">.NET</a></li>
<li><a href="#c--c">C &amp; C++</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul>
<li><a href="#%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3">游戏开发相关</a></li>
<li><a href="#%E6%97%A5%E5%BF%97%E8%81%9A%E5%90%88%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86">日志聚合，分布式日志收集</a></li>
<li><a href="#rtp%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E4%B8%8E%E9%9F%B3%E8%A7%86%E9%A2%91">RTP,实时传输协议与音视频</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="资料篇"><a href="#资料篇" class="headerlink" title="资料篇"></a>资料篇</h2><h3 id="技术站点"><a href="#技术站点" class="headerlink" title="技术站点"></a>技术站点</h3><ul>
<li>在线学习：<a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a>、<a href="https://www.edx.org/" target="_blank" rel="external">edX</a>、<a href="https://cn.udacity.com/" target="_blank" rel="external">Udacity</a>、<a href="https://ocw.mit.edu/index.htm" target="_blank" rel="external">MIT公开课</a>、<a href="http://mooc.guokr.com/course/" target="_blank" rel="external">MOOC学院</a>、<a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a></li>
<li><a href="https://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>：非常棒的针对编程的链接聚合网站</li>
<li><a href="https://www.techmeme.com/" target="_blank" rel="external">Techmeme</a>：美国知名科技新闻和博客聚集网站，类似的还有（Panda, Hacker &amp; Designer News）</li>
<li><a href="https://www.reddit.com/r/programming/" target="_blank" rel="external">Reddit - Programming板块</a>：同上</li>
<li>Java牛人必备：<a href="http://www.programcreek.com/" target="_blank" rel="external">Program Creek</a></li>
<li><a href="https://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>：IT技术问答网站</li>
<li><a href="https://segmentfault.com/" target="_blank" rel="external">SegmentFault</a>：中文的技术问答社区</li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a>：全球最大的源代码管理平台，很多知名开源项目都在上面，如<a href="https://github.com/torvalds/linux" target="_blank" rel="external">Linux内核</a>，<a href="https://github.com/openstack/openstack" target="_blank" rel="external">OpenStack</a>等</li>
<li><a href="https://git.oschina.net/" target="_blank" rel="external">码云</a>：支持中文可免费创建私有项目的代码托管平台，可作为备选</li>
<li><a href="https://leetcode.com/" target="_blank" rel="external">LeetCode</a>：来做做这些题吧，看看自己的算法水平如何？这可比什么面试宝典强多了。</li>
<li><a href="http://www.lintcode.com/zh-cn/" target="_blank" rel="external">LintCode</a>：支持中文的编程题在线训练平台，可作为备选</li>
<li><a href="https://www.kaggle.com/" target="_blank" rel="external">Kaggle</a>,<a href="https://www.topcoder.com/" target="_blank" rel="external">Topcoder</a>: 机器学习、大数据竞赛</li>
<li><a href="https://gold.xitu.io/" target="_blank" rel="external">掘金</a>：高质量的技术社区</li>
<li><a href="https://toutiao.io/" target="_blank" rel="external">开发者头条</a></li>
<li><a href="http://www.infoq.com/cn" target="_blank" rel="external">InfoQ</a>：企业级应用，关注软件开发领域</li>
<li><a href="https://www.v2ex.com/" target="_blank" rel="external">V2EX: way to explore</a></li>
<li>国内老牌技术社区：<a href="https://www.oschina.net/" target="_blank" rel="external">OSChina</a>、<a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>、<a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a>、<a href="http://www.51cto.com/" target="_blank" rel="external">51CTO</a></li>
<li>免费的it电子书：<a href="http://it-ebooks.info/" target="_blank" rel="external">http://it-ebooks.info/</a></li>
<li>在线学习：<a href="http://www.udemy.com/" target="_blank" rel="external">http://www.udemy.com/</a></li>
<li>优质学习资源：<a href="http://plus.mojiax.com/" target="_blank" rel="external">http://plus.mojiax.com/</a></li>
<li>代码练习：<a href="http://exercism.io/" target="_blank" rel="external">http://exercism.io/</a>   and  <a href="https://www.codingame.com" target="_blank" rel="external">https://www.codingame.com</a></li>
<li><a href="http://www.devstore.cn/" target="_blank" rel="external">DevStore</a>:开发者服务商店</li>
<li><a href="https://msdn.microsoft.com/zh-cn" target="_blank" rel="external">MSDN</a>：微软相关的官方技术集中地，主要是文档类</li>
<li><a href="https://developers.google.cn/" target="_blank" rel="external">谷歌开发者</a></li>
<li><a href="http://www.ctolib.com/" target="_blank" rel="external">码库</a> - 收录了实用的开源项目及资源</li>
<li><a href="http://coding.net" target="_blank" rel="external">Coding</a> 基于Git的国内代码托管平台，支持私有项目，有项目管理相关功能</li>
</ul>
<h3 id="必看书籍"><a href="#必看书籍" class="headerlink" title="必看书籍"></a>必看书籍</h3><ul>
<li>SICP(<a href="https://mitpress.mit.edu/sicp/" target="_blank" rel="external">Structure and Interpretation of Computer Programs</a>)</li>
<li>深入理解计算机系统</li>
<li>代码大全2</li>
<li>人件</li>
<li>人月神话</li>
<li>软件随想录</li>
<li>算法导论（麻省理工学院出版社）</li>
<li>离散数学及其应用</li>
<li>设计模式</li>
<li>编程之美</li>
<li>黑客与画家</li>
<li>编程珠玑</li>
<li>The Little Schemer</li>
<li>Simply Scheme_Introducing_Computer_Science</li>
<li>C++ Prime</li>
<li>Effective C++</li>
<li>TCP/IP详解</li>
<li>Unix 编程艺术</li>
<li>技术的本质</li>
<li>软件随想录</li>
<li>计算机程序设计艺术</li>
<li>职业篇：程序员的自我修养,程序员修炼之道,高效能程序员的修炼</li>
<li>《精神分析引论》弗洛伊德</li>
<li>《失控》《科技想要什么》《技术元素》凯文凯利</li>
<li>程序开发心理学</li>
<li>天地一沙鸥</li>
<li>搞定：无压力工作的艺术</li>
</ul>
<h3 id="大牛博客"><a href="#大牛博客" class="headerlink" title="大牛博客"></a>大牛博客</h3><ul>
<li>云风（游戏界大牛）: <a href="http://blog.codingnow.com/" target="_blank" rel="external">http://blog.codingnow.com/</a></li>
<li>王垠（不少文章喷到蛮有道理）：<a href="http://www.yinwang.org/" target="_blank" rel="external">http://www.yinwang.org/</a></li>
<li>冰河-伞哥(Lisp大牛)：<a href="http://tianchunbinghe.blog.163.com/" target="_blank" rel="external">http://tianchunbinghe.blog.163.com/</a></li>
<li>R大<a href="https://zhuanlan.zhihu.com/p/25042028" target="_blank" rel="external">【干货满满】RednaxelaFX写的文章/回答的导航帖</a></li>
<li>陈皓-左耳朵耗子：<a href="http://coolshell.cn/" target="_blank" rel="external">http://coolshell.cn/</a></li>
<li>Jeff Atwood（国外知名博主）: <a href="https://blog.codinghorror.com/" target="_blank" rel="external">https://blog.codinghorror.com/</a></li>
<li>阮一峰（黑客与画家译者，Web）：<a href="http://www.ruanyifeng.com/" target="_blank" rel="external">http://www.ruanyifeng.com/</a></li>
<li>廖雪峰（他的Python、Git教程不少人都看过）：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a></li>
<li>道哥的黑板报（安全）：<a href="https://zhuanlan.zhihu.com/taosay" target="_blank" rel="external">https://zhuanlan.zhihu.com/taosay</a></li>
<li><a href="https://github.com/search?l=&amp;o=desc&amp;p=1&amp;q=location%3AChina&amp;ref=advsearch&amp;s=followers&amp;type=Users&amp;utf8=%E2%9C%93" target="_blank" rel="external">国内GitHub上关注度较高的开发者</a></li>
</ul>
<h3 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h3><p><strong> Awesome </strong></p>
<ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome</a>: 这是个Awesome合集，常见的资料这里面都能找到</li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome2</a>: 类似第一个Awesome</li>
<li><a href="https://github.com/jnv/lists" target="_blank" rel="external">杂七杂八、有用没用的Awesome合集</a></li>
<li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="external">非常不错的语言类学习资料集合：Awesomeness</a></li>
<li><a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">awesome-ios-ui</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/caesar0301/awesome-public-datasets" target="_blank" rel="external">awesome-public-datasets</a></li>
<li><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">awesome-AppSec(系统安全)</a></li>
<li><a href="https://github.com/okulbilisim/awesome-datascience" target="_blank" rel="external">awesome-datascience</a></li>
<li><a href="https://github.com/fasouto/awesome-dataviz" target="_blank" rel="external">awesome-dataviz</a> - 数据可视化库及资料</li>
<li><a href="https://github.com/jacksu/awesome-es" target="_blank" rel="external">awesome-es</a></li>
<li><a href="https://github.com/Blankj/awesome-comment" target="_blank" rel="external">awesome-comment</a> - 神注释大全</li>
</ul>
<p><strong> 书籍资料 </strong></p>
<ul>
<li><a href="https://github.com/bingwen/free-programming-books/blob/master/free-programming-books-ch.md" target="_blank" rel="external">free-programming-books</a> <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">中文版</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="external">《程序员编程艺术 — 面试和算法心得》</a></li>
<li><a href="https://github.com/dariubs/GoBooks" target="_blank" rel="external">GoBooks</a></li>
<li><a href="https://github.com/papers-we-love/papers-we-love" target="_blank" rel="external">Papers we love</a></li>
<li><a href="https://github.com/JustFollowUs/Natural-Language-Processing" target="_blank" rel="external">自然语言处理NLP推荐学习路线及参考资料</a></li>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="external">超级棒的机器学习资料（框架，库，软件）</a>, <a href="http://www.oschina.net/news/53818/awesome-machine-learning" target="_blank" rel="external">中文翻译版</a></li>
<li><a href="http://news.cnblogs.com/n/504467/" target="_blank" rel="external">机器学习(Machine Learning)&amp;深入学习(Deep Learning)资料</a></li>
<li><a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">Docker资料合集</a></li>
<li><a href="https://github.com/apache/incubator-storm/tree/master/examples/storm-starter" target="_blank" rel="external">学习使用Strom</a></li>
<li><a href="http://ercoppa.github.io/HadoopInternals/" target="_blank" rel="external">Hadoop Internals</a></li>
<li><a href="https://github.com/JerryLead/SparkInternals/tree/master/markdown" target="_blank" rel="external">Spark Internals</a></li>
<li><a href="http://hadoop.readthedocs.org/en/latest/" target="_blank" rel="external">大数据时代的数据分析与数据挖掘 – 基于Hadoop实现</a></li>
<li><a href="http://samypesse.gitbooks.io/how-to-create-an-operating-system/index.html" target="_blank" rel="external">如何制作操作系统</a></li>
<li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="external">借助开源项目学习软件开发</a></li>
<li><a href="http://code.csdn.net/news/2821842" target="_blank" rel="external">几个不错的开源游戏引擎</a></li>
<li><a href="https://github.com/hit9/PyZh" target="_blank" rel="external">一起写Python文章，一起看Python文章</a></li>
<li><a href="http://blog.fens.me/series-r/" target="_blank" rel="external">R的极客理想系列文章</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP接口设计指南</a></li>
<li><a href="https://github.com/foru17/front-end-collect" target="_blank" rel="external">分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a></li>
<li><a href="https://github.com/rxin/db-readings" target="_blank" rel="external">Readings in Databases</a></li>
<li><a href="https://github.com/rushter/data-science-blogs" target="_blank" rel="external">Data Science blogs</a></li>
<li><a href="https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md" target="_blank" rel="external">日志：每个软件工程师都应该知道的有关实时数据的统一概念</a></li>
<li><a href="http://guides.codepath.com/android" target="_blank" rel="external">Android Code Path</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="external">Android Learn Notes</a></li>
<li><a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="external">PHP 类库框架，资料集合</a></li>
</ul>
<p><strong> 优秀项目 </strong></p>
<ul>
<li><a href="http://news.cnblogs.com/n/506775/" target="_blank" rel="external">最值得关注的10个C语言开源项目</a></li>
<li><a href="http://code.csdn.net/news/2822568" target="_blank" rel="external">15款值得学习的小型开源项目</a></li>
<li><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="external">iOS-100个开源组件</a></li>
<li><a href="http://code.csdn.net/news/2822753" target="_blank" rel="external">十大Material Design开源项目</a></li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android开源项目分类汇总</a></li>
</ul>
<p><strong> 前端 &amp; Node.js </strong></p>
<ul>
<li><a href="https://github.com/moklick/frontend-stuff" target="_blank" rel="external">前端资源</a></li>
<li><a href="https://github.com/w3crange/Front-End-Develop-Guide" target="_blank" rel="external">前端开发指南</a></li>
<li><a href="http://html5ify.com/fks/" target="_blank" rel="external">前端技能汇总</a></li>
<li><a href="http://www.daqianduan.com/nav" target="_blank" rel="external">前端资源大导航</a></li>
<li><a href="https://github.com/lisposter/frontend-books" target="_blank" rel="external">收集前端方面的书籍</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions" target="_blank" rel="external">2014年最新前端开发面试题</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">简单清晰的JavaScript语言教程，代码示例</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">JavaScript编程规范</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JavaScript必看视频</a></li>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript标准参考教程（阮一峰的，整理的不错）</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JS必看</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning/blob/master/ZH-CN.md" target="_blank" rel="external">AngularJS Guide的中文分支</a></li>
<li><a href="https://github.com/timjacobi/angular2-education" target="_blank" rel="external">Angular2学习资料</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS应用的最佳实践和风格指南</a></li>
<li><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="external">React-Native学习指南</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/sergtitov/NodeJS-Learning/blob/master/cn_resource.md" target="_blank" rel="external">node.js中文资料导航</a></li>
<li><a href="http://blog.fens.me/nodejs-roadmap/" target="_blank" rel="external">Nodejs学习路线图</a></li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js/9629682#9629682" target="_blank" rel="external">如何学习nodejs</a></li>
</ul>
<p><strong> 工作，工具 </strong></p>
<ul>
<li><a href="https://github.com/kahun/awesome-sysadmin" target="_blank" rel="external">系统管理员工具集合</a></li>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://github.com/taobao/nginx-book" target="_blank" rel="external">Nginx开发从入门到精通</a></li>
<li><a href="https://github.com/justjavac/Google-IPs.git" target="_blank" rel="external">Google 全球 IP 地址库</a></li>
<li><a href="https://github.com/greatghoul/remote-working" target="_blank" rel="external">收集整理远程工作相关的资料</a></li>
<li><a href="https://github.com/chriskempson/base16" target="_blank" rel="external">Color schemes for hackers</a></li>
<li><a href="https://github.com/ellisonleao/magictools" target="_blank" rel="external">游戏开发工具集，MagicTools</a></li>
<li><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="external">开发者工具箱， free-for-dev</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="https://github.com/agis-/git-style-guide" target="_blank" rel="external">Git风格指南</a></li>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Bast-App</a></li>
</ul>
<h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="平台工具"><a href="#平台工具" class="headerlink" title="平台工具"></a>平台工具</h3><ul>
<li>Phabricator: 软件开发平台，Facebook出品，现已开源，CodeReview神器（从这个往下一直到GitLab之间的工具统统可以忽略了）</li>
<li>Redmine/Trac：项目管理平台</li>
<li>Jenkins/Jira(非开源)：持续集成系统（Apache Continuum，这个是Apache下的CI系统，还没来得及研究）</li>
<li>git，svn：源代码版本控制系统</li>
<li>GitLab/Gitorious：构建自己的GitHub服务器</li>
<li><a href="https://ci.appveyor.com/" target="_blank" rel="external">AppVeyor</a> - 云端持续集成工具，可以与GitHub搭配使用</li>
<li>Postman:RESTful，api测试工具，HTTP接口开发必备神器</li>
<li><a href="http://airbnb.design/lottie/" target="_blank" rel="external">Lottie</a>: AE动画变原生代码，设计师必备</li>
<li>Sonar：代码质量管理平台</li>
<li>Nessus: 系统漏洞扫描器</li>
<li>gitbook：<a href="https://www.gitbook.io/" target="_blank" rel="external">https://www.gitbook.io/</a>写书的好东西，当然用来写文档也很不错的（发现不少产品的文档就是用的它）</li>
<li>Travis-ci：开源项目持续集成必备，和GitHub相结合，<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>Trello：简单高效的项目管理平台，注重看板管理</li>
<li>日志聚合：graylog、ELK（推荐新一代的graylog，基本上算作是开源的Splunk了）</li>
<li>开源测试工具、社区（Selenium、OpenQA.org）</li>
<li>Puppet:一个自动管理引擎，可以适用于Linux、Unix以及Windows平台。所谓配置管理系统，就是管理机器里面诸如文件、用户、进程、软件包这些资源。无论是管理1台，还是上万台机器Puppet都能轻松搞定。其他类似工具：CFEngine、SaltStack、Ansible</li>
<li>Nagios：系统状态监控报警，还有个Icinga(完全兼容nagios所有的插件,工作原理,配置文件以及方法,几乎一模一样。配置简单,功能强大)</li>
<li>Ganglia：分布式监控系统</li>
<li>fleet：分布式init系统</li>
<li>Ansible：能够大大简化Unix管理员的自动化配置管理与流程控制方式。</li>
<li>GeoLite免费数据库</li>
<li>jsHint:js代码验证工具</li>
<li>haproxy: 高可用负载均衡（此外类似的系统还有nginx，lvs）</li>
<li>linux OS性能分析工具：dstat，iostat，iotop，nmon</li>
<li>kimono：将网页信息转换为api接口的工具</li>
<li>集群管理工具：pdsh，ClusterSSH，mussh（可以用它快速管理Hadoop集群）ipa-server做统一的认证管理</li>
<li>influxdb: 分布式时序数据库，结合Grafana可以进行实时数据分析</li>
<li>dot: 程序员绘图利器（是种语言，也是个工具）</li>
<li>Graph::Easy: （Ascii Art工具）字符流程图绘制，实乃程序员装逼神器。其他类似的工具Asciiflow, vi插件：drawit!</li>
<li>spf13-vim: 让你的vim飞起来！</li>
<li>Kubernetes: 容器集群管理系统</li>
<li>Gatling: 服务器性能压力测试工具</li>
<li>systemtap: Linux内核探测工具、内核调试神器</li>
<li>Cygwin：Windows下的类UNIX模拟环境</li>
<li>MinGW：Windows下的GNU工具集</li>
</ul>
<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Mac下的神兵利器</a></li>
<li><a href="https://asciinema.org/" target="_blank" rel="external">asciinema</a>: 终端录屏神器</li>
<li>Fiddler：非常好用的Web前端调试工具，当然是针对底层http协议的，一般情况使用Chrome等自带的调试工具也足够了，特殊情况还得用它去处理</li>
<li>Charles: Mac上的Web代理调试工具，类似Fiddler</li>
<li><a href="https://fir.im/" target="_blank" rel="external">fir.im</a>免费的移动App内测托管平台</li>
<li>wireshark：知名的网络数据包分析工具</li>
<li>PowerCmd:替代Windows Cmd的利器</li>
<li>RegexBuddy:强大的正则表达式测试工具</li>
<li>Soure Insight：源代码阅读神器</li>
<li>SublimeText：程序员最爱的编辑器</li>
<li>Database.NET：一个通用的关系型数据库客户端，基于.NET 4.0开发的，做简单的处理还是蛮方便的</li>
<li>Navicat Premium：支持MySql、PostgreSQL、Oracle、Sqlite和SQL Server的客户端，通用性上不如Database.NET，但性能方面比Database.NET好很多，自带备份功能也用于数据库定时备份。</li>
<li>Synergy : 局域网内一套键盘鼠标控制多台电脑</li>
<li>DameWare：远程协助工具集（我在公司主要控制大屏幕用）</li>
<li>Radmin: 远程控制工具，用了一段时间的DameWare，还要破解，对Win7支持的不好，还是发现这个好用</li>
<li>Listary：能极大幅度提高你 Windows 文件浏览与搜索速度效率的「超级神器」</li>
<li>Clover：给资源管理器加上多标签，我平时工作的时候就用它，像Chrome一样使用资源管理器，甚是方便啊（这是Windows平台的）</li>
<li>WinLaunch：模拟Mac OS的Launch工具</li>
<li>OllyDbg: OD大名鼎鼎的反汇编工具，Win平台</li>
<li>Fritzing：绘制电路图</li>
<li>LICEcap：gif教程制作</li>
<li>git，svn：版本控制系统</li>
<li>Enigma Virtual Box（将exe，dll等封装成一个可执行程序）</li>
<li>Open DBDiff(针对SqlServer)数据库同步</li>
<li>SymmetricDS：数据库同步</li>
<li>BIEE,Infomatica，SPSS，weka，R语言：数据分析</li>
<li>CodeSmith，LightSwitch：代码生成</li>
<li>Pandoc：Markdown转换工具，出书用的。以前玩过docbook，不过现在还是Markdown盛行啊。</li>
<li>Window Magnet[Mac]：增强Mac窗口管理功能，想Win7一样具有窗口拖放到屏幕边缘自动调整的功能</li>
<li>log explorer：查看SqlServer日志</li>
<li>dependency walker：查询Windows应用程序dll依赖项</li>
<li>Shairport4w：将iPhone，iPad，iPod上的音频通过AirPlay协议传输到PC上</li>
<li>ngrok：内网穿透工具</li>
<li>Axure:快速原型制作工具，还有个在线作图的工具国内的一个创业团队做的，用着很不错<a href="http://www.processon.com/" target="_blank" rel="external">http://www.processon.com/</a></li>
<li>Origami: 次世代交互设计神器</li>
<li>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="external">http://naotu.baidu.com/</a></li>
<li>tinyproxy:（Linux）小型的代理服务器支持http和https协议</li>
<li>EaseUS Partition Master：超级简单的分区调整工具，速度还是蛮快的，C盘不够用了就用它从D盘划点空间吧，不用重装系统这么折腾哦。</li>
<li>CheatEngine：玩游戏修改内存值必备神器（记得我在玩轩辕剑6的时候就用的它，超级方便呢）</li>
<li>ApkIDE:Android反编译神器</li>
<li>翻、墙工具（自|由|门、天行浏览器，免费的VPN：<a href="http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）" target="_blank" rel="external">http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）</a></li>
<li>设计工具：Sketch、OmniGraffle</li>
<li>MindManger：思维导图</li>
<li>MagicDraw:Uml图工具</li>
<li>innotop：MySql状态监测工具</li>
<li>墨刀：比Axure更为简单的原型工具，可以快速制作原型</li>
<li>Karabiner: Mac专用，修改键盘键位的神器，机械键盘必备</li>
<li>Timing：Mac专用，统计你的时间都花在哪了</li>
<li>f.lux: 护眼神器，过滤蓝光，程序员护眼必备良品</li>
<li>LaTeX: 基于ΤΕΧ的排版系统, 让写论文更方便</li>
<li>Antlr：开源的语法分析器，可以让你毫无压力的写个小parser</li>
</ul>
<h3 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h3><ul>
<li>DnsPod：一个不错的智能DNS服务解析提供商</li>
<li>DigitalOcean：海外的云主机提供商，价格便宜，磁盘是SSD的，用过一段时间整体上还可以，不过毕竟是海外的，网速比较慢。国内的就是阿里云了。还有个比较知名的是：Linode，据说速度上比DigitalOcean好很多</li>
<li>移动端推送服务：个推、JPush、云巴</li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>：移动应用开发服务，包括:数据存储、用户管理、消息推送、应用统计、社交分享、实时聊天等服务</li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">Color Hunt</a>: 漂亮炫酷的配色网站，程序员的福音</li>
<li><a href="https://www.heroku.com/" target="_blank" rel="external">Heroku: PaaS平台</a></li>
</ul>
<h3 id="爬虫相关-好玩的工具"><a href="#爬虫相关-好玩的工具" class="headerlink" title="爬虫相关(好玩的工具)"></a>爬虫相关(好玩的工具)</h3><ul>
<li>Phantomjs(Web自动化测试，服务端渲染等)</li>
<li>berserkJS(基于Phantomjs的改进版本)</li>
<li>SlimerJS</li>
<li>CasperJS</li>
<li>selenium</li>
<li>HtmlUnit（开源的java 页面分析工具，也是个Headless的浏览器）</li>
</ul>
<h3 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h3><ul>
<li>sql注入检测：sqlmap、haviji</li>
<li>端口扫描：nmap</li>
<li>渗透测试：BurpLoader</li>
<li>sqltools: sql漏洞利用工具</li>
<li>snort: 入侵检测</li>
</ul>
<h3 id="Web服务器性能-压力测试工具-负载均衡器"><a href="#Web服务器性能-压力测试工具-负载均衡器" class="headerlink" title="Web服务器性能/压力测试工具/负载均衡器"></a>Web服务器性能/压力测试工具/负载均衡器</h3><ul>
<li>ab: ab是apache自带的一款功能强大的测试工具</li>
<li>curl-loader: 真实模拟、测试Web负载</li>
<li>http_load: 程序非常小，解压后也不到100K</li>
<li>webbench: 是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。</li>
<li>Siege: 一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。</li>
<li>squid（前端缓存），nginx（负载），nodejs（没错它也可以，自己写点代码就能实现高性能的负载均衡器）：常用的负载均衡器</li>
<li>Piwik：开源网站访问量统计系统</li>
<li>ClickHeat：开源的网站点击情况热力图</li>
<li>HAProxy：高性能TCP /HTTP负载均衡器</li>
<li>ElasticSearch：搜索引擎基于Lucene</li>
<li>Page Speed SDK和YSLOW</li>
<li>HAR Viewer: HAR分析工具</li>
<li>protractor：E2E（end to end）自动化测试工具</li>
</ul>
<h2 id="大数据处理-数据分析-分布式工具"><a href="#大数据处理-数据分析-分布式工具" class="headerlink" title="大数据处理/数据分析/分布式工具"></a>大数据处理/数据分析/分布式工具</h2><ul>
<li>Hadoop：分布式的文件系统，结合其MapReduce编程模型可以用来做海量数据的批处理（Hive，Pig，HBase啥的就不说了），值得介绍的是Cloudera的Hadoop分支CDH5，基于YARN MRv2集成了Spark可直接用于生产环境的Hadoop，对于企业快速构建数据仓库非常有用。</li>
<li>Spark：大规模数据处理框架（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND有篇文章介绍的不错</li>
<li>除了Spark，其他几个不错的计算框架还有：Kylin，Flink，Drill</li>
<li>Ignite: In-Memory Data Fabric</li>
<li>CarbonData: 华为的孵化项目，支持索引的列式存储</li>
<li>Ceph:Linux分布式文件系统（特点：无中心）</li>
<li>Storm：实时流数据处理，可以看下IBM的一篇介绍 （还有个Yahoo的S4，也是做流数据处理的）</li>
<li>Druid: 实时数据分析存储系统</li>
<li>Ambari: 大数据平台搭建、监控利器；类似的还有CDH</li>
<li>Tachyon：分布式内存文件系统</li>
<li>Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享</li>
<li>Impala：新一代开源大数据分析引擎，提供Sql语义，比Hive强在速度上</li>
<li>presto: facebook的开源工具，大数据分布式sql查询引擎</li>
<li>SNAPPY：快速的数据压缩系统，适用于Hadoop生态系统中</li>
<li>Kafka:高吞吐量的分布式消息队列系统</li>
<li>ActiveMQ:是Apache出品，最流行的，能力强劲的开源消息总线</li>
<li>MQTT:Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分</li>
<li>RabbitMQ：记得OpenStack就是用的这个东西吧</li>
<li>ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍</li>
<li>开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章</li>
<li>Zookeeper：可靠的分布式协调的开源项目</li>
<li>Databus：LinkedIn 实时低延迟数据抓取系统</li>
<li>数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach</li>
<li>序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers</li>
<li>NoSql：ScyllaDB（宣称是世界上最快的NoSql）、Apache Casandra、MongoDB、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、Neo4j</li>
<li>MapReduce相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、Greenplum </li>
<li>数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr/ Lucene、ElasticSearch、Datameer、Bigsheets、Tinkerpop</li>
<li>NLP自然语言处理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais</li>
<li>机器学习：TensorFlow（Google出品），WEKA、Mahout、scikits.learn、SkyTree</li>
<li>可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、Raphaël.js</li>
<li>Kettle：开源的ETL工具</li>
<li>Pentaho：以工作流为核心的开源BI系统</li>
<li>Mondrian：开源的Rolap服务器</li>
<li>Oozie：开源hadoop的工作流调度引擎，类似的还有：Azkaban</li>
<li>开源的数据分析可视化工具：Weka、Orange、KNIME</li>
<li>Cobar：阿里巴巴的MySql分布式中间件</li>
<li>数据清洗：data wrangler， Google Refine</li>
</ul>
<h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul>
<li><a href="https://material.io/" target="_blank" rel="external">Material Design</a>: 谷歌出品，必属精品</li>
<li>Vue.js: 借鉴了Angular及React的JS框架，设计理念较为先进</li>
<li>GRUNT: js task runner</li>
<li>Sea.js: js模块化</li>
<li>knockout.js：MVVM开发前台，绑定技术</li>
<li>Angular.js: 使用超动感HTML &amp; JS开发WEB应用！</li>
<li>Highcharts.js, ECharts, Flot: 常用的数据可视化库</li>
<li>D3.js: 是一个基于JavaScript数据展示库（类似的还有P5.js）</li>
<li><a href="https://vega.github.io/vega/" target="_blank" rel="external">Vega</a>: 基于D3的可视化语法</li>
<li>NVD3: 基于d3.js的图表库</li>
<li>Raw：非常不错的一款高级数据可视化工具</li>
<li>Rickshaw:时序图标库，可用于构建实时图表</li>
<li>JavaScript InfoVis Toolkit：另一款Web数据可视化插件</li>
<li>Pdf.js，在html中展现pdf</li>
<li>ACE，CodeMirror：Html代码编辑器（ACE甚好啊）</li>
<li>NProcess：绚丽的加载进度条</li>
<li>impress.js：让你制作出令人眩目的内容展示效果(类似的还有reveal)</li>
<li>Threejs：3DWeb库</li>
<li>Hightopo：基于Html5的2D、3D可视化UI库</li>
<li>jQuery.dataTables.js:高度灵活的表格插件</li>
<li>Raphaël：js，canvas绘图库，后来发现百度指数的图形就是用它绘出来的</li>
<li>director.js：js路由模块，前端路由，Nodejs后端路由等，适合构造单页应用</li>
<li>pace.js：页面加载进度条</li>
<li>bower：Web包管理器</li>
<li>jsnice：有趣的js反编译工具，猜压缩后的变量名，<a href="http://www.jsnice.org/" target="_blank" rel="external">http://www.jsnice.org/</a></li>
<li>Zepto.js：移动端替代jQuery的东东，当然也可以使用jquery-mobile.</li>
<li>UI框架：Foundation，Boostrap，Pure，EasyUI，Polymer</li>
<li>前段UI设计师必去的几个网站：Dribbble，awwwards，unmatchedstyle，UIMaker</li>
<li>Mozilla 开发者中心：<a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">https://developer.mozilla.org/en-US/</a></li>
<li>图标资源：IcoMoon（我的最爱），Font Awesome, Themify Icons，FreePik，Glyphicons</li>
<li>artDialog:非常漂亮的对话框</li>
<li>AdminLTE：github上的一个开源项目，基于Boostrap3的后台管理页面框架</li>
<li>Respond.js：让不懂爱的IE6-8支持响应式设计</li>
<li>require.js: js模块加载库</li>
<li>select2：比chosen具有更多特性的选择框替代库</li>
<li>AngularUI：集成angular.js的UI库</li>
<li>normalize.css: 采用了现代化标准让各浏览器渲染出的html保持一致的库</li>
<li>CreateJS：Html5游戏引擎</li>
<li>Less,Compass:简化CSS开发</li>
<li>emojify.js:用于自动识别网页上的Emoji文字并将其显示为图像</li>
<li>simditor:一个不错的开源的html编辑器，简洁高效</li>
<li>Sencha:  基于html5的移动端开发框架</li>
<li>SuperScrollorama+TweenMax+skrollr:打造超酷的视差滚动效果网页动画</li>
<li>jquery-smooth-scroll:同上，平滑滚动插件</li>
<li>Animate.css:实现了各种动画效果的css库</li>
<li>Emmet:前端工程师必备，前身为 Zen Coding</li>
<li>React: facebook出品的js UI库</li>
<li>highlight.js：专门用来做语法高亮的库</li>
<li>GoJS: Html5交互式图表库，看demo更适合层次结构的图表。</li>
<li>10 Pure CSS (Mostly) Flat Mobile Devices: <a href="http://marvelapp.github.io/devices.css/" target="_blank" rel="external">http://marvelapp.github.io/devices.css/</a></li>
<li>CodePen: <a href="http://codepen.io/" target="_blank" rel="external">http://codepen.io/</a></li>
<li>jsfiddle: <a href="http://jsfiddle.net/" target="_blank" rel="external">http://jsfiddle.net/</a> 前端js，html，css测试利器</li>
</ul>
<h2 id="语言篇"><a href="#语言篇" class="headerlink" title="语言篇"></a>语言篇</h2><p>折腾中：Scala、Python、Lua、JavaScript、Go</p>
<p>待折腾：</p>
<ul>
<li><a href="http://racket-lang.org/" target="_blank" rel="external">Racket</a></li>
<li><a href="http://ocaml.org/" target="_blank" rel="external">OCaml</a></li>
<li><a href="https://www.rust-lang.org" target="_blank" rel="external">Rust</a></li>
<li><a href="http://julialang.org/" target="_blank" rel="external">Julia</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://www.scala-lang.org/api/current/" target="_blank" rel="external">Scala Standard Library API</a></li>
<li><a href="http://twitter.github.io/scala_school/" target="_blank" rel="external">Scala School!</a>: A Scala tutorial by Twitter</li>
<li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html" target="_blank" rel="external">A Tour of Scala</a>: Tutorial introducing the main concepts of Scala</li>
<li><a href="http://stackoverflow.com/tags/scala/info" target="_blank" rel="external">Scala Overview on StackOverflow</a>: A list of useful questions sorted by topic</li>
<li><a href="http://www.artima.com/pins1ed/" target="_blank" rel="external">Programming in Scala</a>，最新的第3版，还没有电子版，电子版是第一版</li>
<li>《Scala for the Impatient》</li>
<li>《Scala in Depth》</li>
<li>《Programming Scala》Dean Wampler and Alex Payne. O’Reilly 2009</li>
<li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf" target="_blank" rel="external">Scala By Example</a></li>
<li><a href="http://docs.scala-lang.org/cheatsheets/" target="_blank" rel="external">Scala Cheatsheet</a>学习模式匹配的好资料</li>
<li><a href="http://docs.scala-lang.org/glossary/" target="_blank" rel="external">Glossary of Scala and FP terms</a></li>
<li><a href="https://github.com/lihaoyi/Metascala" target="_blank" rel="external">Metascala: A JVM written in Scala</a></li>
<li><a href="https://scala-lms.github.io/" target="_blank" rel="external">LMS: Program Generation and Embedded Compilers in Scala</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li>常用的IDE：IntelliJ IDEA(强烈推荐)，Eclipse，Netbeans</li>
<li><a href="http://fastutil.di.unimi.it/" target="_blank" rel="external">fastutil</a>: 性能更好的Java集合框架</li>
<li>Guava: 谷歌的Java工具包，应用广泛</li>
<li>Curator：Netflix公司开源的一个Zookeeper client library，用于简化Zookeeper客户端编程，现在已经是apache下的一个独立项目了。Spark的HA也用的这货。</li>
<li>Rx(Reactive Extensions)框架：Vert.x, RxJava(Android中用的比较多),  Quasar</li>
<li>FindBugs: 代码静态分析工具，找出代码缺陷</li>
<li>Java反编译工具：Luyten，JD-Gui</li>
<li>Drools: 规则引擎</li>
<li>Jersey: Java RESTful 框架</li>
<li>canal: 阿里巴巴出品，binlog增量订阅&amp;消费组件</li>
<li>Web开发相关：Tomcat、Resin、Jetty、WebLogic等，常用的组件Struts，Spring，Hibernate</li>
<li>Netty: 异步事件驱动网络应用编程框架，用于高并发网络编程比较好（NIO框架，spark 1.2.0就用netty替代了nio）</li>
<li>MINA：简单地开发高性能和高可靠性的网络应用程序（也是个NIO框架），不少手游服务端是用它开发的</li>
<li>jOOQ：java Orm框架</li>
<li>Janino: 超级小又快的Java编译器，Spark的Tungsten引起用的它</li>
<li>Activiti:工作流引擎，类似的还有jBPM、Snaker</li>
<li>Perfuse:是一个用户界面包用来把有结构与无结构数据以具有交互性的可视化图形展示出来.</li>
<li>Gephi:复杂网络分析软件, 其主要用于各种网络和复杂系统，动态和分层图的交互可视化与探测开源工具</li>
<li>Nutch:知名的爬虫项目，hadoop就是从这个项目中发展出来的</li>
<li>web-harvest：Web数据提取工具</li>
<li>POM工具：Maven+Artifactory</li>
<li>Akka:一款基于actor模型实现的 并发处理框架</li>
<li>EclEmma：覆盖测试工具</li>
<li>Shiro:安全框架</li>
<li>joda-time:简化时间处理</li>
<li>parboiled:表达式解析</li>
<li>dozer: 深拷贝神器</li>
<li>dubbo: 阿里巴巴出品的分布式服务框架</li>
<li>jackson databind: json序列化工具(fastjson,simplejson)</li>
<li>Atomikos: 分布式事务管理</li>
<li>BoneCP：性能很赞的数据库连接池组件，据说比c3p0快好多</li>
<li>ProGuard: obconfuscation tool, 强大的混淆工具</li>
<li>S-99：Scala相关的99个问题</li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li>PyCharm：最佳Python IDE</li>
<li>Eric,Eclipse+pydev,比较不错的Python IDE</li>
<li>PyWin:Win32 api编程包</li>
<li>numpy:科学计算包，主要用来处理大型矩阵计算等，此外还有SciPy，Matplotlib</li>
<li>GUI相关：PyQt，PyQwt</li>
<li>supervisor:进程监控工具</li>
<li>PyGame: 基于Python的多媒体开发和游戏软件开发模块</li>
<li>Web框架: Django 开源web开发框架，它鼓励快速开发,并遵循MVC设计</li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="external">Swift精选资料</a></li>
<li><a href="http://www.csdn.net/article/2015-01-09/2823502-swift-open-source-libs" target="_blank" rel="external">43个优秀的开源项目</a></li>
</ul>
<p><strong>客户端</strong></p>
<ul>
<li><a href="https://github.com/YANGReal/JokeClient-Swift" target="_blank" rel="external">糗事百科 Swift</a></li>
<li><a href="https://github.com/amitburst/HackerNews" target="_blank" rel="external">HackerNews Swift</a></li>
<li><a href="https://github.com/jxd001/Swift-ZhihuDaily" target="_blank" rel="external">知乎日报app</a></li>
</ul>
<p><strong>Framework</strong></p>
<ul>
<li><a href="https://github.com/mattdonnelly/Swifter" target="_blank" rel="external">Twitter框架</a></li>
<li><a href="https://github.com/glock45/swifter" target="_blank" rel="external">Mac下简单HTTP Server Swifter</a></li>
</ul>
<p><strong>小工具</strong></p>
<ul>
<li><a href="https://github.com/ChrisChares/swift-alarm" target="_blank" rel="external">Swift Alarm</a></li>
<li><a href="https://github.com/mslathrop/SwiftNote" target="_blank" rel="external">Swift Note</a></li>
<li><a href="https://github.com/wantedly/swift-rss-sample" target="_blank" rel="external">Swift RSS Reader</a></li>
<li><a href="https://github.com/sxyx2008/Swift-PM25" target="_blank" rel="external">Swift-PM2.5查询app</a></li>
</ul>
<p><strong>游戏</strong></p>
<ul>
<li><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="external">Flappy Swift</a></li>
<li><a href="https://github.com/geek5nan/FanFanSwift" target="_blank" rel="external">FanFan Swift</a></li>
</ul>
<h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><ul>
<li>Xilium.CefGlue:基于CEF框架的.NET封装，基于.NET开发Chrome内核浏览器</li>
<li>CefSharp：同上，有一款WebKit的封装，C#和Js交互会更简单</li>
<li>netz:免费的 .NET 可执行文件压缩工具</li>
<li>SmartAssembly:变态的.net代码优化混淆工具</li>
<li>NETDeob0：.net反混淆工具，真是魔高一尺道高一丈啊(还有个de4dot，在GitHub上，都是开源的)</li>
<li>ILMerge：将所有引用的DLL和exe文件打成一个exe文件</li>
<li>ILSpy:开源.net程序反编译工具</li>
<li>Javascript.NET：很不错的js执行引擎，对v8做了封装</li>
<li>NPOI: Excel操作</li>
<li>DotRAS:远程访问服务的模块</li>
<li>WinHtmlEditor: Winform下的html编辑器</li>
<li>SmartThreadPool:使用C#实现的，带高级特性的线程池</li>
<li>Snoop: WPF Spy Utility</li>
<li>Autofac: 轻量级IoC框架</li>
<li>HtmlAgilityPack：Html解析利器</li>
<li>Quartz.NET：Job调度</li>
<li>HttpLib：@CodePlex，简化http请求</li>
<li>SuperSocket：简化Socket操作，基于他的还有个SuperWebSocket，可以开发独立的WebSocket服务器了</li>
<li>DocX：未安装Office的情况下操作Word文件</li>
<li>Dapper：轻量级的ORM类，性能不错</li>
<li>HubbleDotNet：支持接入数据库的全文搜索系统</li>
<li>fastJSON：@CodeProject，高性能的json序列化类</li>
<li>ZXing.NET：@CodePlex，QR，条形码相关</li>
<li>Nancy：轻量级Http服务器，做个小型的Web应用可以摆脱IIS喽(Nancy.Viewengines.Razor,可以加入Razor引擎)</li>
<li>AntiXSS：微软的XSS防御库Microsoft Web Protection Library</li>
<li>Jint：JavaScript解释器</li>
<li>CS-Script：将C#代码文件作为脚本执行</li>
<li>Jexus：Linux下 高性能、易用、免费的ASP.NET服务器</li>
<li>Clay：将dynamic发挥的更加灵活，像写js一样写C#</li>
<li>DynamicJSON：不必定义数据模型获取json数据</li>
<li>SharpPcap：C#版的WinPcap调用端，牛逼的网络包分析库（自带PacketNotNet用于包协议分析）</li>
<li>Roslyn：C#，VB编译器</li>
<li>ImageResizer: 服务端自由控制图片大小，真乃神器也，对手机端传小图，PC端传大图，CMS用它很方便</li>
<li>UI相关：DevExpress, Fluent(Office 07风格), mui（Modern UI for WPF）</li>
<li>NetSparkle：应用自动更新组件</li>
<li>ConfuserEx: 开源.net混淆工具</li>
<li>ServiceStack: 开源高性能Web服务框架，可用于构建高性能的REST服务</li>
<li>Expression Evaluator：Eval for C#,处理字符串表达式</li>
<li><a href="http://nugetmusthaves.com/" target="_blank" rel="external">http://nugetmusthaves.com/</a></li>
<li>Reactive Extensions (Rx):异步，事件驱动编程包， Rx = Observables + LINQ + Schedulers</li>
</ul>
<h3 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C &amp; C++"></a>C &amp; C++</h3><ul>
<li>Thrift:用来进行可扩展且跨语言的服务的开发(类似的还有个Avro，Google protobuf)。</li>
<li>libevent:是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制。（对了还有个libev呢）</li>
<li>Boost:不多说了，准C++标准库</li>
<li>Valgrind\Ptmalloc\Purify: 调试工具</li>
<li>NetworkServer架构：acceptor-&gt;dispatcher-&gt;worker(这个不算工具哦)</li>
<li><a href="https://pocoproject.org/" target="_blank" rel="external">POCO</a> - 开源的C++类库及应用程序框架的集合,它主要提供简单的、快速的网络和可移植应用程序</li>
<li>breakpad:崩溃转储和分析模块，很多crashreport会用到</li>
<li>UI界面相关：MFC、BCG和QT这类的就不说了，高端一点的还有Html和DirectUI技术：libcef（基于chrome内核的，想想使用html5开发页面，还真有点小激动呢）、HtmlLayout、Duilib、Bolt，非C++的，还有node-webkit也不错，集成了node和webkit内核。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="游戏开发相关"><a href="#游戏开发相关" class="headerlink" title="游戏开发相关"></a>游戏开发相关</h3><ul>
<li>MINA：使用Java开发手游和页游服务器(对了还有Netty，也很猛的，都是基于NIO的)</li>
<li>HP-Socket：见有有些页游服务器使用这个构建的</li>
<li>Unreal: 虚幻引擎，C++，基于这个引擎的游戏很多</li>
<li>OGRE：大名鼎鼎的3D图形渲染引擎，天龙八部OL、火炬之光等不少游戏都用了这个引擎</li>
<li>OpenVDB：梦工厂C++的特效库，开源的</li>
<li>cocos2d：跨平台2D游戏引擎</li>
<li>unity3d：跨平台3D游戏引擎，很火的哦</li>
<li>Nodejs：也有不少使用它来开发手游和页游服务器（网易的Pomelo）</li>
</ul>
<h3 id="日志聚合，分布式日志收集"><a href="#日志聚合，分布式日志收集" class="headerlink" title="日志聚合，分布式日志收集"></a>日志聚合，分布式日志收集</h3><ul>
<li>Scribe：Facebook的（nodejs + scribe + inotify 同步日志）</li>
<li>logstash:强大的日志收集系统，可以基于logstash+kibana+elasticsearch+redis开发强大的日志分析平台</li>
<li>log.io: nodejs开发的实时日志收集系统</li>
<li>Graylog: 易用、功能丰富的日志管理系统， 部署、维护、搜索比<code>ELK</code>简单</li>
</ul>
<h3 id="RTP-实时传输协议与音视频"><a href="#RTP-实时传输协议与音视频" class="headerlink" title="RTP,实时传输协议与音视频"></a>RTP,实时传输协议与音视频</h3><ul>
<li>RTP，RTCP，RTSP-&gt; librtp，JRTPLIB(遵循了RFC1889标准)</li>
<li>环形缓冲区，实时数据传输用</li>
<li>SDL,ffmpeg,live555,Speex</li>
<li>Red5:用Java开发开源的Flash流媒体服务器。它支持：把音频（MP3）和视频（FLV）转换成播放流； 录制客户端播放流（只支持FLV）；共享对象；现场直播流发布；远程调用。<iframe src="http://www.godql.com/blog/simple/index.html" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%" frameborder="0" scrolling="no" allowtransparency="true"></iframe>

</li>
</ul>]]></content>
    
    <summary type="html">
    
      成为专业开发者路上用到的各种优秀资料、神器及框架
    
    </summary>
    
      <category term="Java" scheme="http://GitHubSupervise.io/blog/categories/Java/"/>
    
    
      <category term="java" scheme="http://GitHubSupervise.io/blog/tags/java/"/>
    
      <category term="资源" scheme="http://GitHubSupervise.io/blog/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
</feed>
